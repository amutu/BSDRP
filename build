#!/bin/sh
#
# Build script for BSD Router Project
# https://bsdrp.net
#
# Copyright (c) 2009-2024, The BSDRP Development Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

set -eu

###############################################################################
# Poudriere configurations files are in poudriere.etc/poudriere.d/
# - First build a "builder" jail (BSDRPj), which is a reduced FreeBSD but that
#   still needs to have compilers tools to build packages.
#   - List of WITHOUT in BSDRPj-src.conf
#   - Custom kernel configuration file (amd64 here)
# - Second, from this builder jail, we generate packages:
#   - ports list in BSDRP-pkglist
#   - ports options in BSDRPj-make.conf
# - Third and last, we generate a nanobsd-like, uefi compliant firmware image
#   - No need of compiler tools, more WITHOUT_added in image-BSDRPj-src.conf
#   - But FreeBSD some unwanted files are still here, so adding list of them
#     in excluded.files
#   - All avoiding extracting unwanted files from package using a pkg.conf
#     in BSDRP/Files/usr/local/etc/pkg.conf
#   - And a post customization script in post-script.sh
###############################################################################

# Variables

logfile="/tmp/BSDRP.build.log"
pkglist="/tmp/BSDRP.pkg.list"
sudo=""

# Functions

#######################################
# Print on STDERR
# Globals:
#   None
# Arguments:
#   Message to print
#######################################
die() {
  echo -n "EXIT: " >&2
  echo "$@" >&2
  exit 1
}

###### main ######

if [ $(id -u) -ne 0 ]; then
	if which -s sudo; then
		sudo="sudo -E"
	else
		die "Need to start as root because sudo not found"
	fi
fi

arch=$(uname -m)
localdir=$(realpath $(dirname $0))

echo "Generating BSDRP disk image (logs in: ${logfile})..."
# Download and patches sources, install custom kernel (amd64)
# so kept local patch files method

# XXX Need to put "update" function in a shared lib
echo "[DEBUG] run make -U"
#./make.sh -U

# Create or update the builder jail
# if arm64 sed delete amd kernel module and pkglist
# XXX Need to avoid patching revisionned file
if [ "${arch}" = "arm64" ]; then
  for f in amdsbwd amdsmn amdtemp blake2 coretemp cpuctl ichwd ioat qat qat_c2xxx qatfw padlock; do
		if grep -q $f ${localdir}/poudriere.etc/poudriere.d/BSDRPj-src.conf; then
			echo "${arch} detected, removing $f kernel module..."
		sed -i "" -e "/^[[:space:]]${f}/d" ${localdir}/poudriere.etc/poudriere.d/BSDRPj-src.conf
		fi
	done
fi
if poudriere -e poudriere.etc jail -ln | grep -q BSDRPj; then
	path_of_the_jail=$(poudriere -e ${localdir}/poudriere.etc/ jail -j BSDRPj -l | tail -1 | cut -d ' ' -f 10)
	if [ -n "$(find ${localdir}/BSDRP/FreeBSD/src -type f -newer ${path_of_the_jail}/boot/kernel/kernel)" ]; then
		echo "Find sources newer than kernel, updating poudriere jail..."
		echo "XXX BUG: Always trigger this update!!!!"
		${sudo} poudriere -e ${localdir}/poudriere.etc jail -u -j BSDRPj -b -m src=${localdir}/BSDRP/FreeBSD/src -K ${arch} > $logfile 2>&1
	fi
else
	echo "Creating poudriere jail..."
	if ! ${sudo} poudriere -e ${localdir}/poudriere.etc jail -c -j BSDRPj -b -m src=${localdir}/BSDRP/FreeBSD/src -K ${arch} >> $logfile 2>&1; then
    tail -n 20 $logfile
    die "Failed to create the base jail"
  fi
fi

# Create or update port tree
# XXX Regression: latest modifications time of dependencies are ignored
if poudriere -e ${localdir}/poudriere.etc ports -ln | grep -q BSDRPp; then
	echo "Updating poudriere port tree..."
	if ! ${sudo} poudriere -e ${localdir}/poudriere.etc ports -u -p BSDRPp -m null -M ${localdir}/BSDRP/FreeBSD/ports >> $logfile 2>&1; then
		tail -n 20 $logfile
	  die "Failed to update port tree"
	fi
else
	echo "Creating poudriere port tree.."
	if ! ${sudo} poudriere -e ${localdir}/poudriere.etc ports -c -p BSDRPp -m null -M ${localdir}/BSDRP/FreeBSD/ports >> $logfile 2>&1; then
  tail -n 20 $logfile
  die "Failed to create port tree"
	fi
fi

# Build the packages
# Some packages are architectures dependends
cp ${localdir}/poudriere.etc/poudriere.d/BSDRP-pkglist.common ${pkglist}
if [ -f ${localdir}/poudriere.etc/poudriere.d/BSDRP-pkglist.${arch} ]; then
	cat ${localdir}/poudriere.etc/poudriere.d/BSDRP-pkglist.${arch} >> ${pkglist}
fi
echo "Building packages..."
if ! ${sudo} poudriere -e ${localdir}/poudriere.etc bulk -j BSDRPj -p BSDRPp \
	-f ${pkglist} >> $logfile 2>&1; then
	tail -n 20 $logfile
	die "Failed to build packages"
fi

# Build the firmware image
# size in bytes
# Notice that we are using a custom pkg.conf files preventing to install useless files

echo "Generating disk image..."
if ! ${sudo} poudriere -e ${localdir}/poudriere.etc image -t firmware -s 4g \
	-j BSDRPj -p BSDRPp -n BSDRP -h router.bsdrp.net \
	-c ${localdir}/BSDRP/Files/ \
	-f ${pkglist} \
	-X ${localdir}/poudriere.etc/poudriere.d/excluded.files \
	-A ${localdir}/poudriere.etc/poudriere.d/post-script.sh >> $logfile 2>&1; then
  tail -n 20 $logfile
  die "Failed to generate disk image"
fi

echo "Build done"
echo "- Full disk image: /usr/local/poudriere/data/images/BSDRP.img"
echo "- Upgrade image: /usr/local/poudriere/data/images/BSDRP-upgrade.img"

# Convert image to VHD
# qemu-img convert -f raw -O vpc /usr/local/poudriere/data/images/BSDRP.img BSDRP.vhd
