##################################################################
# For modifying this file, you need to remount / in read-write:  #
# mount -uw /                                                    #
#                                                                #
# Don't load modules not necessary for mounting local disk here: #
# - add module name to the kld_list variable in rc.conf          #
# Example for loading the padlock crypto module and coretemp:    #
# kld_list='padlock coretemp'                                    #
#                                                                #
# Don't put serial/dual console port value like these here too:  #
# - boot_serial                                                  #
# - comconsole_speed                                             #
# - console                                                      #
# Use /boot.config in place                                      #
##################################################################

### Don't wait for USB (can prevent correct reboot)
hw.usb.no_shutdown_wait="1"

### Use next-gen MRSAS drivers in place of MFI for device supporting it
# This solves lot of [mfi] COMMAND 0x... TIMEOUT AFTER ## SECONDS
hw.mfi.mrsas_enable="1"

### Tune some global values ###
hw.usb.no_pf="1"	# Disable USB packet filtering

# Load The DPDK Longest Prefix Match (LPM) modules
dpdk_lpm4_load="YES"
dpdk_lpm6_load="YES"

# Load DXR: IPv4 lookup algo
fib_dxr_load="YES"

# Loading newest Intel microcode
cpu_microcode_load="YES"
cpu_microcode_name="/boot/firmware/intel-ucode.bin"

# Disabling Page Table Isolation
# XXX Need to run bench
#vm.pmap.pti="0"

### Intel NIC tuning ###
# https://bsdrp.net/documentation/technical_docs/performance#nic_drivers_tuning
# Don't limit the maximum of number of received packets to process at a time
hw.igb.rx_process_limit="-1"
hw.em.rx_process_limit="-1"
hw.ix.rx_process_limit="-1"
# Allow unsupported SFP
hw.ix.unsupported_sfp="1"
hw.ix.allow_unsupported_sfp="1"

### Chelsio NIC tuning ###
# Prevent to reserve ASIC ressources unused on a router/firewall,
# improve performance when we will reach 10Mpps or more
hw.cxgbe.toecaps_allowed="0"
hw.cxgbe.rdmacaps_allowed="0"
hw.cxgbe.iscsicaps_allowed="0"
hw.cxgbe.fcoecaps_allowed="0"

# Under network heavy usage, network critical traffic (mainly
# non-RSS traffic like ARP, LACP) could be droped and flaping LACP links.
# To mitigate this situation, Chelsio could reserves one TX queue for
# non-RSS traffic with this tuneable:
# hw.cxgbe.rsrv_noflowq="1"
# But compensate the number of TX queue by increasing it by one.
# As example, if you had 8 queues, uses now 9:
# hw.cxgbe.ntxq="9"

### link tunning ###
# Increase interface send queue length
# lagg user: This value should be at minimum the sum of txd buffer of each NIC in the lagg
# hw.ix.txd: 2048 by default, then use x4 here (lagg with 4 members)
net.link.ifqmaxlen="16384"

# Avoid message netisr_register: epair requested queue limit 688128 capped to net.isr.maxqlimit 1024
net.isr.maxqlimit=1000000

# Use all cores for netisr processing
net.isr.maxthreads=-1
