Index: net/pkt-gen/Makefile
===================================================================
--- net/pkt-gen/Makefile	(revision 557996)
+++ net/pkt-gen/Makefile	(working copy)
@@ -1,8 +1,7 @@
 # $FreeBSD$
 
 PORTNAME=	pkt-gen
-PORTVERSION=	g2017.08.06
-PORTREVISION=	1
+PORTVERSION=	g2019.11.07
 CATEGORIES=	net
 
 MAINTAINER=	shurd@FreeBSD.org
@@ -14,20 +13,27 @@
 USE_GITHUB=	yes
 GH_ACCOUNT=	luigirizzo
 GH_PROJECT=	netmap
-GH_TAGNAME=	3c3ab5faa2ab9c89db09cd8339d0e96a1a78c41a
+GH_TAGNAME=	95ef45d
 MAKEFILE=	GNUmakefile
-WRKSRC_SUBDIR=	apps/pkt-gen
-PATCH_WRKSRC=	${WRKSRC}/..
+MAKE_ENV+=	TARGET_ARCH=
 
 OPTIONS_DEFINE=	PCAP
-PCAP_DESC=	Support loading packets from pcap file
+PCAP_DESC=	Support loading packet from pcap file
 OPTIONS_DEFAULT=PCAP
 PCAP_MAKE_ARGS=	WITH_PCAP=1
 
-PLIST_FILES=	bin/pkt-gen
+PLIST_FILES=	bin/pkt-gen \
+		bin/nmreplay
 
+do-build:
+	cd ${WRKSRC}/libnetmap && ${SETENV} ${MAKE_ENV} ${GMAKE} ${MAKE_ARGS} ${MAKE_FLAGS} ${MAKEFILE}
+	cd ${WRKSRC}/apps/pkt-gen && ${SETENV} ${MAKE_ENV} ${GMAKE} ${MAKE_ARGS} ${MAKE_FLAGS} ${MAKEFILE}
+	cd ${WRKSRC}/apps/nmreplay && ${SETENV} ${MAKE_ENV} ${GMAKE} ${MAKE_ARGS} ${MAKE_FLAGS} ${MAKEFILE}
+
 do-install:
-	${INSTALL_PROGRAM} ${WRKSRC}/pkt-gen \
+	${INSTALL_PROGRAM} ${WRKSRC}/apps/pkt-gen/pkt-gen \
 		${STAGEDIR}${PREFIX}/bin
+	${INSTALL_PROGRAM} ${WRKSRC}/apps/nmreplay/nmreplay \
+		${STAGEDIR}${PREFIX}/bin
 
 .include <bsd.port.mk>
Index: net/pkt-gen/distinfo
===================================================================
--- net/pkt-gen/distinfo	(revision 557996)
+++ net/pkt-gen/distinfo	(working copy)
@@ -1,3 +1,3 @@
-TIMESTAMP = 1503651090
-SHA256 (luigirizzo-netmap-g2017.08.06-3c3ab5faa2ab9c89db09cd8339d0e96a1a78c41a_GH0.tar.gz) = 755f0b7d195cfdd7148591ef01ae4da569cae3e323ffded74dfbaa571dc267f3
-SIZE (luigirizzo-netmap-g2017.08.06-3c3ab5faa2ab9c89db09cd8339d0e96a1a78c41a_GH0.tar.gz) = 544000
+TIMESTAMP = 1574296686
+SHA256 (luigirizzo-netmap-g2019.11.07-95ef45d_GH0.tar.gz) = 5cf4e11f8d3f991404d6d4942dcbe801c5d9c172a81872b46e7d6e02ca5552b4
+SIZE (luigirizzo-netmap-g2019.11.07-95ef45d_GH0.tar.gz) = 710389
Index: net/pkt-gen/files/patch-apps_nmreplay_GNUmakefile
===================================================================
--- net/pkt-gen/files/patch-apps_nmreplay_GNUmakefile	(nonexistent)
+++ net/pkt-gen/files/patch-apps_nmreplay_GNUmakefile	(working copy)
@@ -0,0 +1,11 @@
+--- apps/nmreplay/GNUmakefile.orig	2019-11-21 06:26:42 UTC
++++ apps/nmreplay/GNUmakefile
+@@ -14,7 +14,7 @@ CFLAGS += -Werror -Wall -Wunused-function
+ CFLAGS += -I $(SRCDIR)/sys -I $(SRCDIR)/apps/include -I $(SRCDIR)/libnetmap
+ CFLAGS += -Wextra
+ 
+-LDFLAGS += -L $(BUILDDIR)/build-libnetmap
++LDFLAGS += -L ../../libnetmap
+ LDLIBS += -lnetmap -lpthread
+ ifeq ($(shell uname),Linux)
+ 	LDLIBS += -lrt	# on linux

Property changes on: net/pkt-gen/files/patch-apps_nmreplay_GNUmakefile
___________________________________________________________________
Added: fbsd:nokeywords
## -0,0 +1 ##
+yes
\ No newline at end of property
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: net/pkt-gen/files/patch-apps_pkt-gen_GNUmakefile
===================================================================
--- net/pkt-gen/files/patch-apps_pkt-gen_GNUmakefile	(nonexistent)
+++ net/pkt-gen/files/patch-apps_pkt-gen_GNUmakefile	(working copy)
@@ -0,0 +1,11 @@
+--- apps/pkt-gen/GNUmakefile.orig	2019-11-21 06:24:22 UTC
++++ apps/pkt-gen/GNUmakefile
+@@ -14,7 +14,7 @@ CFLAGS += -Werror -Wall -Wunused-function
+ CFLAGS += -I $(SRCDIR)/sys -I $(SRCDIR)/apps/include -I $(SRCDIR)/libnetmap
+ CFLAGS += -Wextra -Wno-address-of-packed-member
+ 
+-LDFLAGS = -L $(BUILDDIR)/build-libnetmap
++LDFLAGS = -L ../../libnetmap
+ LDLIBS += -lpthread -lm -lnetmap
+ ifeq ($(shell uname),Linux)
+ 	LDLIBS += -lrt	# on linux

Property changes on: net/pkt-gen/files/patch-apps_pkt-gen_GNUmakefile
___________________________________________________________________
Added: fbsd:nokeywords
## -0,0 +1 ##
+yes
\ No newline at end of property
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: net/pkt-gen/files/patch-apps_pkt-gen_pkt-gen.c
===================================================================
--- net/pkt-gen/files/patch-apps_pkt-gen_pkt-gen.c	(nonexistent)
+++ net/pkt-gen/files/patch-apps_pkt-gen_pkt-gen.c	(working copy)
@@ -0,0 +1,553 @@
+--- apps/pkt-gen/pkt-gen.c.orig	2019-11-06 09:59:27 UTC
++++ apps/pkt-gen/pkt-gen.c
+@@ -38,42 +38,40 @@
+  */
+ 
+ #define _GNU_SOURCE	/* for CPU_SET() */
+-#include <stdio.h>
+-#include <libnetmap.h>
+-
+-
+-#include <sys/types.h>
+-#include <sys/stat.h>
+-#include <fcntl.h>
+-#include <ctype.h>	// isprint()
+-#include <string.h>
+-#include <unistd.h>	// sysconf()
+-#include <sys/poll.h>
+-#include <sys/ioctl.h>
+-#include <signal.h>
+ #include <arpa/inet.h>	/* ntohs */
+-#if !defined(_WIN32) && !defined(linux)
+-#include <sys/sysctl.h>	/* sysctl */
+-#endif
++#include <assert.h>
++#include <ctype.h>	// isprint()
++#include <errno.h>
++#include <fcntl.h>
+ #include <ifaddrs.h>	/* getifaddrs */
++#include <libnetmap.h>
++#include <math.h>
+ #include <net/ethernet.h>
+ #include <netinet/in.h>
+ #include <netinet/ip.h>
+-#include <netinet/udp.h>
+ #include <netinet/ip6.h>
++#include <netinet/udp.h>
++#ifndef NO_PCAP
++#include <pcap/pcap.h>
++#endif
++#include <pthread.h>
++#include <signal.h>
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++#include <sys/ioctl.h>
++#include <sys/poll.h>
++#include <sys/stat.h>
++#if !defined(_WIN32) && !defined(linux)
++#include <sys/sysctl.h>	/* sysctl */
++#endif
++#include <sys/types.h>
++#include <unistd.h>	// sysconf()
+ #ifdef linux
+ #define IPV6_VERSION	0x60
+ #define IPV6_DEFHLIM	64
+ #endif
+-#include <assert.h>
+-#include <math.h>
+ 
+-#include <pthread.h>
+-
+-#ifndef NO_PCAP
+-#include <pcap/pcap.h>
+-#endif
+-
+ #include "ctrs.h"
+ 
+ static void usage(int);
+@@ -184,14 +182,14 @@ static inline void CPU_SET(uint32_t i, cpuset_t *p)
+ 	do {struct timespec t0 = {0,0}; *(b) = t0; } while (0)
+ #endif  /* __APPLE__ */
+ 
+-const char *default_payload="netmap pkt-gen DIRECT payload\n"
++static const char *default_payload = "netmap pkt-gen DIRECT payload\n"
+ 	"http://info.iet.unipi.it/~luigi/netmap/ ";
+ 
+-const char *indirect_payload="netmap pkt-gen indirect payload\n"
++static const char *indirect_payload = "netmap pkt-gen indirect payload\n"
+ 	"http://info.iet.unipi.it/~luigi/netmap/ ";
+ 
+-int verbose = 0;
+-int normalize = 1;
++static int verbose = 0;
++static int normalize = 1;
+ 
+ #define VIRT_HDR_1	10	/* length of a base vnet-hdr */
+ #define VIRT_HDR_2	12	/* length of the extenede vnet-hdr */
+@@ -223,7 +221,7 @@ struct pkt {
+     ((af) == AF_INET ? (p)->ipv4.f: (p)->ipv6.f)
+ 
+ struct ip_range {
+-	char *name;
++	const char *name;
+ 	union {
+ 		struct {
+ 			uint32_t start, end; /* same as struct in_addr */
+@@ -237,7 +235,7 @@ struct ip_range {
+ };
+ 
+ struct mac_range {
+-	char *name;
++	const char *name;
+ 	struct ether_addr start, end;
+ };
+ 
+@@ -272,6 +270,7 @@ struct glob_arg {
+ 	int nthreads;
+ 	int cpus;	/* cpus used for running */
+ 	int system_cpus;	/* cpus on the system */
++	int softchecksum;   /* Enable software UDP checksum calculation */
+ 
+ 	int options;	/* testing */
+ #define OPT_PREFETCH	1
+@@ -281,7 +280,7 @@ struct glob_arg {
+ #define OPT_TS		16	/* add a timestamp */
+ #define OPT_INDIRECT	32	/* use indirect buffers, tx only */
+ #define OPT_DUMP	64	/* dump rx/tx traffic */
+-#define OPT_RUBBISH	256	/* send wathever the buffers contain */
++#define OPT_RUBBISH	256	/* send whatever the buffers contain */
+ #define OPT_RANDOM_SRC  512
+ #define OPT_RANDOM_DST  1024
+ #define OPT_PPS_STATS   2048
+@@ -302,7 +301,7 @@ struct glob_arg {
+ 	int td_type;
+ 	void *mmap_addr;
+ 	char ifname[MAX_IFNAMELEN];
+-	char *nmr_config;
++	const char *nmr_config;
+ 	int dummy_send;
+ 	int virt_header;	/* send also the virt_header */
+ 	char *packet_file;	/* -P option */
+@@ -633,7 +632,7 @@ system_ncpus(void)
+  * If there is no 4th number, then the 3rd is assigned to both #tx-rings
+  * and #rx-rings.
+  */
+-int
++static int
+ parse_nmr_config(const char* conf, struct nmreq_register *nmr)
+ {
+ 	char *w, *tok;
+@@ -738,7 +737,7 @@ checksum(const void *data, uint16_t len, uint32_t sum)
+ 
+ 	/* Checksum all the pairs of bytes first... */
+ 	for (i = 0; i < (len & ~1U); i += 2) {
+-		sum += (u_int16_t)ntohs(*((u_int16_t *)(addr + i)));
++		sum += (uint16_t)ntohs(*((const uint16_t *)(addr + i)));
+ 		if (sum > 0xFFFF)
+ 			sum -= 0xFFFF;
+ 	}
+@@ -810,91 +809,99 @@ update_ip(struct pkt *pkt, struct targ *t)
+ 	struct glob_arg *g = t->g;
+ 	struct ip ip;
+ 	struct udphdr udp;
+-	uint32_t oaddr, naddr;
+-	uint16_t oport, nport;
++	uint32_t soaddr, snaddr; /* Old and new source addresses */
++	uint16_t soport, snport;
++	uint32_t doaddr, dnaddr;
++	uint16_t doport, dnport; /* Old and new destination ports */
+ 	uint16_t ip_sum, udp_sum;
+ 
+ 	memcpy(&ip, &pkt->ipv4.ip, sizeof(ip));
+ 	memcpy(&udp, &pkt->ipv4.udp, sizeof(udp));
++
++	/* Warning: do {} while(false) is not a loop */
+ 	do {
+ 		ip_sum = udp_sum = 0;
+-		naddr = oaddr = ntohl(ip.ip_src.s_addr);
+-		nport = oport = ntohs(udp.uh_sport);
++		snaddr = soaddr = ntohl(ip.ip_src.s_addr);
++		snport = soport = ntohs(udp.uh_sport);
++		dnaddr = doaddr = ntohl(ip.ip_dst.s_addr);
++		dnport = doport = ntohs(udp.uh_dport);
++
++		/* Update source port and address */
+ 		if (g->options & OPT_RANDOM_SRC) {
+ 			ip.ip_src.s_addr = nrand48(t->seed);
+ 			udp.uh_sport = nrand48(t->seed);
+-			naddr = ntohl(ip.ip_src.s_addr);
+-			nport = ntohs(udp.uh_sport);
++			snaddr = ntohl(ip.ip_src.s_addr);
++			snport = ntohs(udp.uh_sport);
+ 			break;
+ 		}
+-		if (oport < g->src_ip.port1) {
+-			nport = oport + 1;
+-			udp.uh_sport = htons(nport);
++		if (soport < g->src_ip.port1) {
++			snport = soport + 1;
++			udp.uh_sport = htons(snport);
+ 			break;
+ 		}
+-		nport = g->src_ip.port0;
+-		udp.uh_sport = htons(nport);
+-		if (oaddr < g->src_ip.ipv4.end) {
+-			naddr = oaddr + 1;
+-			ip.ip_src.s_addr = htonl(naddr);
++		snport = g->src_ip.port0;
++		udp.uh_sport = htons(snport);
++		if (soaddr < g->src_ip.ipv4.end) {
++			snaddr = soaddr + 1;
++			ip.ip_src.s_addr = htonl(snaddr);
+ 			break;
+ 		}
+-		naddr = g->src_ip.ipv4.start;
+-		ip.ip_src.s_addr = htonl(naddr);
+-	} while (0);
+-	/* update checksums if needed */
+-	if (oaddr != naddr) {
+-		ip_sum = cksum_add(ip_sum, ~oaddr >> 16);
+-		ip_sum = cksum_add(ip_sum, ~oaddr & 0xffff);
+-		ip_sum = cksum_add(ip_sum, naddr >> 16);
+-		ip_sum = cksum_add(ip_sum, naddr & 0xffff);
+-	}
+-	if (oport != nport) {
+-		udp_sum = cksum_add(udp_sum, ~oport);
+-		udp_sum = cksum_add(udp_sum, nport);
+-	}
+-	do {
+-		naddr = oaddr = ntohl(ip.ip_dst.s_addr);
+-		nport = oport = ntohs(udp.uh_dport);
++		snaddr = g->src_ip.ipv4.start;
++		ip.ip_src.s_addr = htonl(snaddr);
++
++		/* Update destination port and address */
+ 		if (g->options & OPT_RANDOM_DST) {
+ 			ip.ip_dst.s_addr = nrand48(t->seed);
+ 			udp.uh_dport = nrand48(t->seed);
+-			naddr = ntohl(ip.ip_dst.s_addr);
+-			nport = ntohs(udp.uh_dport);
++			dnaddr = ntohl(ip.ip_dst.s_addr);
++			dnport = ntohs(udp.uh_dport);
+ 			break;
+ 		}
+-		if (oport < g->dst_ip.port1) {
+-			nport = oport + 1;
+-			udp.uh_dport = htons(nport);
++		if (doport < g->dst_ip.port1) {
++			dnport = doport + 1;
++			udp.uh_dport = htons(dnport);
+ 			break;
+ 		}
+-		nport = g->dst_ip.port0;
+-		udp.uh_dport = htons(nport);
+-		if (oaddr < g->dst_ip.ipv4.end) {
+-			naddr = oaddr + 1;
+-			ip.ip_dst.s_addr = htonl(naddr);
++		dnport = g->dst_ip.port0;
++		udp.uh_dport = htons(dnport);
++		if (doaddr < g->dst_ip.ipv4.end) {
++			dnaddr = doaddr + 1;
++			ip.ip_dst.s_addr = htonl(dnaddr);
+ 			break;
+ 		}
+-		naddr = g->dst_ip.ipv4.start;
+-		ip.ip_dst.s_addr = htonl(naddr);
++		dnaddr = g->dst_ip.ipv4.start;
++		ip.ip_dst.s_addr = htonl(dnaddr);
+ 	} while (0);
+-	/* update checksums */
+-	if (oaddr != naddr) {
+-		ip_sum = cksum_add(ip_sum, ~oaddr >> 16);
+-		ip_sum = cksum_add(ip_sum, ~oaddr & 0xffff);
+-		ip_sum = cksum_add(ip_sum, naddr >> 16);
+-		ip_sum = cksum_add(ip_sum, naddr & 0xffff);
++
++	/* update checksums if needed */
++	if (g->softchecksum) {
++	if (soaddr != snaddr) {
++		ip_sum = cksum_add(ip_sum, ~soaddr >> 16);
++		ip_sum = cksum_add(ip_sum, ~soaddr & 0xffff);
++		ip_sum = cksum_add(ip_sum, snaddr >> 16);
++		ip_sum = cksum_add(ip_sum, snaddr & 0xffff);
+ 	}
+-	if (oport != nport) {
+-		udp_sum = cksum_add(udp_sum, ~oport);
+-		udp_sum = cksum_add(udp_sum, nport);
++	if (soport != snport) {
++		udp_sum = cksum_add(udp_sum, ~soport);
++		udp_sum = cksum_add(udp_sum, snport);
+ 	}
++	if (doaddr != dnaddr) {
++		ip_sum = cksum_add(ip_sum, ~doaddr >> 16);
++		ip_sum = cksum_add(ip_sum, ~doaddr & 0xffff);
++		ip_sum = cksum_add(ip_sum, dnaddr >> 16);
++		ip_sum = cksum_add(ip_sum, dnaddr & 0xffff);
++	}
++	if (doport != dnport) {
++		udp_sum = cksum_add(udp_sum, ~doport);
++		udp_sum = cksum_add(udp_sum, dnport);
++	}
+ 	if (udp_sum != 0)
+ 		udp.uh_sum = ~cksum_add(~udp.uh_sum, htons(udp_sum));
+ 	if (ip_sum != 0) {
+ 		ip.ip_sum = ~cksum_add(~ip.ip_sum, htons(ip_sum));
+ 		udp.uh_sum = ~cksum_add(~udp.uh_sum, htons(ip_sum));
+ 	}
++	}
+ 	memcpy(&pkt->ipv4.ip, &ip, sizeof(ip));
+ 	memcpy(&pkt->ipv4.udp, &udp, sizeof(udp));
+ }
+@@ -908,81 +915,91 @@ update_ip6(struct pkt *pkt, struct targ *t)
+ 	struct glob_arg *g = t->g;
+ 	struct ip6_hdr ip6;
+ 	struct udphdr udp;
+-	uint16_t udp_sum;
+-	uint16_t oaddr, naddr;
+-	uint16_t oport, nport;
+-	uint8_t group;
++	uint16_t udp_sum, ip_sum;
++	uint16_t soaddr, snaddr;
++	uint16_t soport, snport;
++	uint16_t doaddr, dnaddr;
++	uint16_t doport, dnport;
++	uint8_t sgroup, dgroup;
+ 
+ 	memcpy(&ip6, &pkt->ipv6.ip, sizeof(ip6));
+ 	memcpy(&udp, &pkt->ipv6.udp, sizeof(udp));
++
++	/* Warning: do {} while(false) is not a loop */
+ 	do {
+ 		udp_sum = 0;
+-		group = g->src_ip.ipv6.sgroup;
+-		naddr = oaddr = ntohs(ip6.ip6_src.s6_addr16[group]);
+-		nport = oport = ntohs(udp.uh_sport);
++		ip_sum = 0;
++		sgroup = g->src_ip.ipv6.sgroup;
++		snaddr = soaddr = ntohs(ip6.ip6_src.s6_addr16[sgroup]);
++		snport = soport = ntohs(udp.uh_sport);
++		dgroup = g->dst_ip.ipv6.sgroup;
++		dnaddr = doaddr = ntohs(ip6.ip6_dst.s6_addr16[dgroup]);
++		dnport = doport = ntohs(udp.uh_dport);
++
++		/* Update source port and address */
+ 		if (g->options & OPT_RANDOM_SRC) {
+-			ip6.ip6_src.s6_addr16[group] = nrand48(t->seed);
++			ip6.ip6_src.s6_addr16[sgroup] = nrand48(t->seed);
+ 			udp.uh_sport = nrand48(t->seed);
+-			naddr = ntohs(ip6.ip6_src.s6_addr16[group]);
+-			nport = ntohs(udp.uh_sport);
++			snaddr = ntohs(ip6.ip6_src.s6_addr16[sgroup]);
++			snport = ntohs(udp.uh_sport);
+ 			break;
+ 		}
+-		if (oport < g->src_ip.port1) {
+-			nport = oport + 1;
+-			udp.uh_sport = htons(nport);
++		if (soport < g->src_ip.port1) {
++			snport = soport + 1;
++			udp.uh_sport = htons(snport);
+ 			break;
+ 		}
+-		nport = g->src_ip.port0;
+-		udp.uh_sport = htons(nport);
+-		if (oaddr < ntohs(g->src_ip.ipv6.end.s6_addr16[group])) {
+-			naddr = oaddr + 1;
+-			ip6.ip6_src.s6_addr16[group] = htons(naddr);
++		snport = g->src_ip.port0;
++		udp.uh_sport = htons(snport);
++		if (soaddr < ntohs(g->src_ip.ipv6.end.s6_addr16[sgroup])) {
++			snaddr = soaddr + 1;
++			ip6.ip6_src.s6_addr16[sgroup] = htons(snaddr);
+ 			break;
+ 		}
+-		naddr = ntohs(g->src_ip.ipv6.start.s6_addr16[group]);
+-		ip6.ip6_src.s6_addr16[group] = htons(naddr);
+-	} while (0);
+-	/* update checksums if needed */
+-	if (oaddr != naddr)
+-		udp_sum = cksum_add(~oaddr, naddr);
+-	if (oport != nport)
+-		udp_sum = cksum_add(udp_sum,
+-		    cksum_add(~oport, nport));
+-	do {
+-		group = g->dst_ip.ipv6.egroup;
+-		naddr = oaddr = ntohs(ip6.ip6_dst.s6_addr16[group]);
+-		nport = oport = ntohs(udp.uh_dport);
++		snaddr = ntohs(g->src_ip.ipv6.start.s6_addr16[sgroup]);
++		ip6.ip6_src.s6_addr16[sgroup] = htons(snaddr);
++
++		/* Update destination port and address */
+ 		if (g->options & OPT_RANDOM_DST) {
+-			ip6.ip6_dst.s6_addr16[group] = nrand48(t->seed);
++			ip6.ip6_dst.s6_addr16[dgroup] = nrand48(t->seed);
+ 			udp.uh_dport = nrand48(t->seed);
+-			naddr = ntohs(ip6.ip6_dst.s6_addr16[group]);
+-			nport = ntohs(udp.uh_dport);
++			dnaddr = ntohs(ip6.ip6_dst.s6_addr16[dgroup]);
++			dnport = ntohs(udp.uh_dport);
+ 			break;
+ 		}
+-		if (oport < g->dst_ip.port1) {
+-			nport = oport + 1;
+-			udp.uh_dport = htons(nport);
++		if (doport < g->dst_ip.port1) {
++			dnport = doport + 1;
++			udp.uh_dport = htons(dnport);
+ 			break;
+ 		}
+-		nport = g->dst_ip.port0;
+-		udp.uh_dport = htons(nport);
+-		if (oaddr < ntohs(g->dst_ip.ipv6.end.s6_addr16[group])) {
+-			naddr = oaddr + 1;
+-			ip6.ip6_dst.s6_addr16[group] = htons(naddr);
++		dnport = g->dst_ip.port0;
++		udp.uh_dport = htons(dnport);
++		if (doaddr < ntohs(g->dst_ip.ipv6.end.s6_addr16[dgroup])) {
++			dnaddr = doaddr + 1;
++			ip6.ip6_dst.s6_addr16[dgroup] = htons(dnaddr);
+ 			break;
+ 		}
+-		naddr = ntohs(g->dst_ip.ipv6.start.s6_addr16[group]);
+-		ip6.ip6_dst.s6_addr16[group] = htons(naddr);
++		dnaddr = ntohs(g->dst_ip.ipv6.start.s6_addr16[dgroup]);
++		ip6.ip6_dst.s6_addr16[dgroup] = htons(dnaddr);
+ 	} while (0);
+-	/* update checksums */
+-	if (oaddr != naddr)
++
++	if (g->softchecksum) {
++	/* update checksums if needed */
++	/* XXX Buggy code: incorrect checksum */
++	if (soaddr != snaddr)
++		udp_sum = cksum_add(~soaddr, snaddr);
++	if (soport != snport)
+ 		udp_sum = cksum_add(udp_sum,
+-		    cksum_add(~oaddr, naddr));
+-	if (oport != nport)
++		    cksum_add(~soport, snport));
++	if (doaddr != dnaddr)
+ 		udp_sum = cksum_add(udp_sum,
+-		    cksum_add(~oport, nport));
++		    cksum_add(~doaddr, dnaddr));
++	if (doport != dnport)
++		udp_sum = cksum_add(udp_sum,
++		    cksum_add(~doport, dnport));
+ 	if (udp_sum != 0)
+ 		udp.uh_sum = ~cksum_add(~udp.uh_sum, udp_sum);
++	}
+ 	memcpy(&pkt->ipv6.ip, &ip6, sizeof(ip6));
+ 	memcpy(&pkt->ipv6.udp, &udp, sizeof(udp));
+ }
+@@ -1255,7 +1272,7 @@ send_packets(struct netmap_ring *ring, struct pkt *pkt
+ /*
+  * Index of the highest bit set
+  */
+-uint32_t
++static uint32_t
+ msb64(uint64_t x)
+ {
+ 	uint64_t m = 1ULL << 63;
+@@ -2374,7 +2391,7 @@ usage(int errcode)
+ "             for client-side ping-pong operation, and pong for server-side ping-pong operation.\n"
+ "\n"
+ "     -n count\n"
+-"             Number of iterations of the pkt-gen function, with 0 meaning infinite).  In case of tx or rx,\n"
++"             Number of iterations of the pkt-gen function (with 0 meaning infinite).  In case of tx or rx,\n"
+ "             count is the number of packets to receive or transmit.  In case of ping or pong, count is the\n"
+ "             number of ping-pong transactions.\n"
+ "\n"
+@@ -2411,20 +2428,24 @@ usage(int errcode)
+ "     -p threads\n"
+ "             Number of threads to use.  By default, only a single thread is used to handle all the netmap\n"
+ "             rings.  If threads is larger than one, each thread handles a single TX ring (in tx mode), a\n"
+-"             single RX ring (in rx mode), or a TX/RX ring couple.  The number of threads must be less or\n"
+-"             equal than the number of TX (or RX) ring available in the device specified by interface.\n"
++"             single RX ring (in rx mode), or a TX/RX ring pair.  The number of threads must be less than or\n"
++"             equal to the number of TX (or RX) rings available in the device specified by interface.\n"
+ "\n"
+ "     -T report_ms\n"
+ "             Number of milliseconds between reports.\n"
+ "\n"
++"     -U      Enable software checksum calculation\n"
++"             (mandatory for NIC drivers that didn' support\n"
++"             hardwarde checksum calc in netmap mode)\n"
++"\n"
+ "     -w wait_for_link_time\n"
+-"             Number of seconds to wait before starting the pkt-gen function, useuful to make sure that the\n"
++"             Number of seconds to wait before starting the pkt-gen function, useful to make sure that the\n"
+ "             network link is up.  A network device driver may take some time to enter netmap mode, or to\n"
+ "             create a new transmit/receive ring pair when netmap(4) requests one.\n"
+ "\n"
+ "     -R rate\n"
+ "             Packet transmission rate.  Not setting the packet transmission rate tells pkt-gen to transmit\n"
+-"             packets as quickly as possible.  On servers from 2010 on-wards netmap(4) is able to com-\n"
++"             packets as quickly as possible.  On servers from 2010 onward netmap(4) is able to com-\n"
+ "             pletely use all of the bandwidth of a 10 or 40Gbps link, so this option should be used unless\n"
+ "             your intention is to saturate the link.\n"
+ "\n"
+@@ -2470,7 +2491,7 @@ usage(int errcode)
+ "\n"
+ "     -C tx_slots[,rx_slots[,tx_rings[,rx_rings]]]\n"
+ "             Configuration in terms of number of rings and slots to be used when opening the netmap port.\n"
+-"             Such configuration has effect on software ports created on the fly, such as VALE ports and\n"
++"             Such configuration has an effect on software ports created on the fly, such as VALE ports and\n"
+ "             netmap pipes.  The configuration may consist of 1 to 4 numbers separated by commas: tx_slots,\n"
+ "             rx_slots, tx_rings, rx_rings.  Missing numbers or zeroes stand for default values.  As an\n"
+ "             additional convenience, if exactly one number is specified, then this is assigned to both\n"
+@@ -2486,7 +2507,7 @@ usage(int errcode)
+ "				OPT_INDIRECT	32 (use indirect buffers)\n"
+ "				OPT_DUMP	64 (dump rx/tx traffic)\n"
+ "				OPT_RUBBISH	256\n"
+-"					(send wathever the buffers contain)\n"
++"					(send whatever the buffers contain)\n"
+ "				OPT_RANDOM_SRC  512\n"
+ "				OPT_RANDOM_DST  1024\n"
+ "				OPT_PPS_STATS   2048\n"
+@@ -2722,7 +2743,7 @@ main_thread(struct glob_arg *g)
+ 
+ struct td_desc {
+ 	int ty;
+-	char *key;
++	const char *key;
+ 	void *f;
+ 	int default_burst;
+ };
+@@ -2742,7 +2763,7 @@ tap_alloc(char *dev)
+ {
+ 	struct ifreq ifr;
+ 	int fd, err;
+-	char *clonedev = TAP_CLONEDEV;
++	const char *clonedev = TAP_CLONEDEV;
+ 
+ 	(void)err;
+ 	(void)dev;
+@@ -2834,6 +2855,7 @@ main(int arc, char **argv)
+ 	g.dst_ip.name = "10.1.0.1";
+ 	g.dst_mac.name = "ff:ff:ff:ff:ff:ff";
+ 	g.src_mac.name = NULL;
++	g.softchecksum = 0;
+ 	g.pkt_size = 60;
+ 	g.pkt_min_size = 0;
+ 	g.nthreads = 1;
+@@ -2847,7 +2869,7 @@ main(int arc, char **argv)
+ 	g.wait_link = 2;	/* wait 2 seconds for physical ports */
+ 
+ 	while ((ch = getopt(arc, argv, "46a:f:F:Nn:i:Il:d:s:D:S:b:c:o:p:"
+-	    "T:w:WvR:XC:H:rP:zZAhBM:")) != -1) {
++	    "T:w:WvR:UXC:H:rP:zZAhBM:")) != -1) {
+ 
+ 		switch(ch) {
+ 		default:
+@@ -2962,6 +2984,10 @@ main(int arc, char **argv)
+ 
+ 		case 'T':	/* report interval */
+ 			g.report_interval = atoi(optarg);
++			break;
++
++		case 'U':   /* Enable software checksum calculation */
++			g.softchecksum = 1;
+ 			break;
+ 
+ 		case 'w':

Property changes on: net/pkt-gen/files/patch-apps_pkt-gen_pkt-gen.c
___________________________________________________________________
Added: fbsd:nokeywords
## -0,0 +1 ##
+yes
\ No newline at end of property
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: net/pkt-gen/files/patch-include_ctrs.h
===================================================================
--- net/pkt-gen/files/patch-include_ctrs.h	(revision 557996)
+++ net/pkt-gen/files/patch-include_ctrs.h	(nonexistent)
@@ -1,36 +0,0 @@
---- include/ctrs.h.orig	2017-08-06 18:26:36 UTC
-+++ include/ctrs.h
-@@ -16,21 +16,27 @@ struct my_ctrs {
-  * Caller has to make sure that the buffer is large enough.
-  */
- static const char *
--norm2(char *buf, double val, char *fmt)
-+norm2(char *buf, double val, char *fmt, int normalize)
- {
- 	char *units[] = { "", "K", "M", "G", "T" };
- 	u_int i;
--
--	for (i = 0; val >=1000 && i < sizeof(units)/sizeof(char *) - 1; i++)
--		val /= 1000;
-+	if (normalize)
-+		for (i = 0; val >=1000 && i < sizeof(units)/sizeof(char *) - 1; i++)
-+			val /= 1000;
-+	else
-+		i=0;
- 	sprintf(buf, fmt, val, units[i]);
- 	return buf;
- }
- 
- static __inline const char *
--norm(char *buf, double val)
-+norm(char *buf, double val, int normalize)
- {
--	return norm2(buf, val, "%.3f %s");
-+	
-+	if (normalize)
-+		return norm2(buf, val, "%.3f %s", normalize);
-+	else
-+		return norm2(buf, val, "%.0f %s", normalize);
- }
- 
- static __inline int

Property changes on: net/pkt-gen/files/patch-include_ctrs.h
___________________________________________________________________
Deleted: fbsd:nokeywords
## -1 +0,0 ##
-on
\ No newline at end of property
Deleted: svn:eol-style
## -1 +0,0 ##
-native
\ No newline at end of property
Deleted: svn:mime-type
## -1 +0,0 ##
-text/plain
\ No newline at end of property
Index: net/pkt-gen/files/patch-pkt-gen_GNUmakefile
===================================================================
--- net/pkt-gen/files/patch-pkt-gen_GNUmakefile	(revision 557996)
+++ net/pkt-gen/files/patch-pkt-gen_GNUmakefile	(nonexistent)
@@ -1,13 +0,0 @@
---- pkt-gen/GNUmakefile.orig	2018-08-15 02:22:27 UTC
-+++ pkt-gen/GNUmakefile
-@@ -10,9 +10,8 @@ VPATH = $(SRCDIR)/apps/pkt-gen
- 
- NO_MAN=
- CFLAGS = -O2 -pipe
--CFLAGS += -Werror -Wall -Wunused-function
-+CFLAGS += -Wunused-function
- CFLAGS += -I $(SRCDIR)/sys -I $(SRCDIR)/apps/include
--CFLAGS += -Wextra
- 
- LDLIBS += -lpthread -lm
- ifeq ($(shell uname),Linux)

Property changes on: net/pkt-gen/files/patch-pkt-gen_GNUmakefile
___________________________________________________________________
Deleted: fbsd:nokeywords
## -1 +0,0 ##
-yes
\ No newline at end of property
Deleted: svn:eol-style
## -1 +0,0 ##
-native
\ No newline at end of property
Deleted: svn:mime-type
## -1 +0,0 ##
-text/plain
\ No newline at end of property
Index: net/pkt-gen/files/patch-pkt-gen_pkt-gen.c
===================================================================
--- net/pkt-gen/files/patch-pkt-gen_pkt-gen.c	(revision 557996)
+++ net/pkt-gen/files/patch-pkt-gen_pkt-gen.c	(nonexistent)
@@ -1,599 +0,0 @@
---- pkt-gen/pkt-gen.c.orig	2017-08-06 18:26:36 UTC
-+++ pkt-gen/pkt-gen.c
-@@ -62,6 +62,7 @@
- #endif
- #include <assert.h>
- #include <math.h>
-+#include <inttypes.h>
- 
- #include <pthread.h>
- 
-@@ -186,6 +187,7 @@ const char *indirect_payload="netmap pkt
- 	"http://info.iet.unipi.it/~luigi/netmap/ ";
- 
- int verbose = 0;
-+int normalize = 1;
- 
- #define VIRT_HDR_1	10	/* length of a base vnet-hdr */
- #define VIRT_HDR_2	12	/* length of the extenede vnet-hdr */
-@@ -204,12 +206,12 @@ struct pkt {
- 			struct ip ip;
- 			struct udphdr udp;
- 			uint8_t body[MAX_BODYSIZE];	/* hardwired */
--		} ipv4;
-+		} __attribute__((__packed__)) ipv4;
- 		struct {
- 			struct ip6_hdr ip;
- 			struct udphdr udp;
- 			uint8_t body[MAX_BODYSIZE];	/* hardwired */
--		} ipv6;
-+		} __attribute__((__packed__)) ipv6;
- 	};
- } __attribute__((__packed__));
- 
-@@ -752,39 +754,39 @@ dump_payload(const char *_p, int len, st
- static void
- update_ip(struct pkt *pkt, struct glob_arg *g)
- {
--	struct ip *ip;
--	struct udphdr *udp;
-+	struct ip ip;
-+	struct udphdr udp;
- 	uint32_t oaddr, naddr;
- 	uint16_t oport, nport;
- 	uint16_t ip_sum, udp_sum;
- 
--	ip = &pkt->ipv4.ip;
--	udp = &pkt->ipv4.udp;
-+	memcpy(&ip, &pkt->ipv4.ip, sizeof(ip));
-+	memcpy(&udp, &pkt->ipv4.udp, sizeof(udp));
- 	do {
- 		ip_sum = udp_sum = 0;
--		naddr = oaddr = ntohl(ip->ip_src.s_addr);
--		nport = oport = ntohs(udp->uh_sport);
-+		naddr = oaddr = ntohl(ip.ip_src.s_addr);
-+		nport = oport = ntohs(udp.uh_sport);
- 		if (g->options & OPT_RANDOM_SRC) {
--			ip->ip_src.s_addr = random();
--			udp->uh_sport = random();
--			naddr = ntohl(ip->ip_src.s_addr);
--			nport = ntohs(udp->uh_sport);
-+			ip.ip_src.s_addr = random();
-+			udp.uh_sport = random();
-+			naddr = ntohl(ip.ip_src.s_addr);
-+			nport = ntohs(udp.uh_sport);
- 			break;
- 		}
- 		if (oport < g->src_ip.port1) {
- 			nport = oport + 1;
--			udp->uh_sport = htons(nport);
-+			udp.uh_sport = htons(nport);
- 			break;
- 		}
- 		nport = g->src_ip.port0;
--		udp->uh_sport = htons(nport);
-+		udp.uh_sport = htons(nport);
- 		if (oaddr < g->src_ip.ipv4.end) {
- 			naddr = oaddr + 1;
--			ip->ip_src.s_addr = htonl(naddr);
-+			ip.ip_src.s_addr = htonl(naddr);
- 			break;
- 		}
- 		naddr = g->src_ip.ipv4.start;
--		ip->ip_src.s_addr = htonl(naddr);
-+		ip.ip_src.s_addr = htonl(naddr);
- 	} while (0);
- 	/* update checksums if needed */
- 	if (oaddr != naddr) {
-@@ -798,29 +800,29 @@ update_ip(struct pkt *pkt, struct glob_a
- 		udp_sum = cksum_add(udp_sum, nport);
- 	}
- 	do {
--		naddr = oaddr = ntohl(ip->ip_dst.s_addr);
--		nport = oport = ntohs(udp->uh_dport);
-+		naddr = oaddr = ntohl(ip.ip_dst.s_addr);
-+		nport = oport = ntohs(udp.uh_dport);
- 		if (g->options & OPT_RANDOM_DST) {
--			ip->ip_dst.s_addr = random();
--			udp->uh_dport = random();
--			naddr = ntohl(ip->ip_dst.s_addr);
--			nport = ntohs(udp->uh_dport);
-+			ip.ip_dst.s_addr = random();
-+			udp.uh_dport = random();
-+			naddr = ntohl(ip.ip_dst.s_addr);
-+			nport = ntohs(udp.uh_dport);
- 			break;
- 		}
- 		if (oport < g->dst_ip.port1) {
- 			nport = oport + 1;
--			udp->uh_dport = htons(nport);
-+			udp.uh_dport = htons(nport);
- 			break;
- 		}
- 		nport = g->dst_ip.port0;
--		udp->uh_dport = htons(nport);
-+		udp.uh_dport = htons(nport);
- 		if (oaddr < g->dst_ip.ipv4.end) {
- 			naddr = oaddr + 1;
--			ip->ip_dst.s_addr = htonl(naddr);
-+			ip.ip_dst.s_addr = htonl(naddr);
- 			break;
- 		}
- 		naddr = g->dst_ip.ipv4.start;
--		ip->ip_dst.s_addr = htonl(naddr);
-+		ip.ip_dst.s_addr = htonl(naddr);
- 	} while (0);
- 	/* update checksums */
- 	if (oaddr != naddr) {
-@@ -834,11 +836,13 @@ update_ip(struct pkt *pkt, struct glob_a
- 		udp_sum = cksum_add(udp_sum, nport);
- 	}
- 	if (udp_sum != 0)
--		udp->uh_sum = ~cksum_add(~udp->uh_sum, htons(udp_sum));
-+		udp.uh_sum = ~cksum_add(~udp.uh_sum, htons(udp_sum));
- 	if (ip_sum != 0) {
--		ip->ip_sum = ~cksum_add(~ip->ip_sum, htons(ip_sum));
--		udp->uh_sum = ~cksum_add(~udp->uh_sum, htons(ip_sum));
-+		ip.ip_sum = ~cksum_add(~ip.ip_sum, htons(ip_sum));
-+		udp.uh_sum = ~cksum_add(~udp.uh_sum, htons(ip_sum));
- 	}
-+	memcpy(&pkt->ipv4.ip, &ip, sizeof(ip));
-+	memcpy(&pkt->ipv4.udp, &udp, sizeof(udp));
- }
- 
- #ifndef s6_addr16
-@@ -847,41 +851,41 @@ update_ip(struct pkt *pkt, struct glob_a
- static void
- update_ip6(struct pkt *pkt, struct glob_arg *g)
- {
--	struct ip6_hdr *ip6;
--	struct udphdr *udp;
-+	struct ip6_hdr ip6;
-+	struct udphdr udp;
- 	uint16_t udp_sum;
- 	uint16_t oaddr, naddr;
- 	uint16_t oport, nport;
- 	uint8_t group;
- 
--	ip6 = &pkt->ipv6.ip;
--	udp = &pkt->ipv6.udp;
-+	memcpy(&ip6, &pkt->ipv6.ip, sizeof(ip6));
-+	memcpy(&udp, &pkt->ipv6.udp, sizeof(udp));
- 	do {
- 		udp_sum = 0;
- 		group = g->src_ip.ipv6.sgroup;
--		naddr = oaddr = ntohs(ip6->ip6_src.s6_addr16[group]);
--		nport = oport = ntohs(udp->uh_sport);
-+		naddr = oaddr = ntohs(ip6.ip6_src.s6_addr16[group]);
-+		nport = oport = ntohs(udp.uh_sport);
- 		if (g->options & OPT_RANDOM_SRC) {
--			ip6->ip6_src.s6_addr16[group] = random();
--			udp->uh_sport = random();
--			naddr = ntohs(ip6->ip6_src.s6_addr16[group]);
--			nport = ntohs(udp->uh_sport);
-+			ip6.ip6_src.s6_addr16[group] = random();
-+			udp.uh_sport = random();
-+			naddr = ntohs(ip6.ip6_src.s6_addr16[group]);
-+			nport = ntohs(udp.uh_sport);
- 			break;
- 		}
- 		if (oport < g->src_ip.port1) {
- 			nport = oport + 1;
--			udp->uh_sport = htons(nport);
-+			udp.uh_sport = htons(nport);
- 			break;
- 		}
- 		nport = g->src_ip.port0;
--		udp->uh_sport = htons(nport);
-+		udp.uh_sport = htons(nport);
- 		if (oaddr < ntohs(g->src_ip.ipv6.end.s6_addr16[group])) {
- 			naddr = oaddr + 1;
--			ip6->ip6_src.s6_addr16[group] = htons(naddr);
-+			ip6.ip6_src.s6_addr16[group] = htons(naddr);
- 			break;
- 		}
- 		naddr = ntohs(g->src_ip.ipv6.start.s6_addr16[group]);
--		ip6->ip6_src.s6_addr16[group] = htons(naddr);
-+		ip6.ip6_src.s6_addr16[group] = htons(naddr);
- 	} while (0);
- 	/* update checksums if needed */
- 	if (oaddr != naddr)
-@@ -891,29 +895,29 @@ update_ip6(struct pkt *pkt, struct glob_
- 		    cksum_add(~oport, nport));
- 	do {
- 		group = g->dst_ip.ipv6.egroup;
--		naddr = oaddr = ntohs(ip6->ip6_dst.s6_addr16[group]);
--		nport = oport = ntohs(udp->uh_dport);
-+		naddr = oaddr = ntohs(ip6.ip6_dst.s6_addr16[group]);
-+		nport = oport = ntohs(udp.uh_dport);
- 		if (g->options & OPT_RANDOM_DST) {
--			ip6->ip6_dst.s6_addr16[group] = random();
--			udp->uh_dport = random();
--			naddr = ntohs(ip6->ip6_dst.s6_addr16[group]);
--			nport = ntohs(udp->uh_dport);
-+			ip6.ip6_dst.s6_addr16[group] = random();
-+			udp.uh_dport = random();
-+			naddr = ntohs(ip6.ip6_dst.s6_addr16[group]);
-+			nport = ntohs(udp.uh_dport);
- 			break;
- 		}
- 		if (oport < g->dst_ip.port1) {
- 			nport = oport + 1;
--			udp->uh_dport = htons(nport);
-+			udp.uh_dport = htons(nport);
- 			break;
- 		}
- 		nport = g->dst_ip.port0;
--		udp->uh_dport = htons(nport);
-+		udp.uh_dport = htons(nport);
- 		if (oaddr < ntohs(g->dst_ip.ipv6.end.s6_addr16[group])) {
- 			naddr = oaddr + 1;
--			ip6->ip6_dst.s6_addr16[group] = htons(naddr);
-+			ip6.ip6_dst.s6_addr16[group] = htons(naddr);
- 			break;
- 		}
- 		naddr = ntohs(g->dst_ip.ipv6.start.s6_addr16[group]);
--		ip6->ip6_dst.s6_addr16[group] = htons(naddr);
-+		ip6.ip6_dst.s6_addr16[group] = htons(naddr);
- 	} while (0);
- 	/* update checksums */
- 	if (oaddr != naddr)
-@@ -923,7 +927,9 @@ update_ip6(struct pkt *pkt, struct glob_
- 		udp_sum = cksum_add(udp_sum,
- 		    cksum_add(~oport, nport));
- 	if (udp_sum != 0)
--		udp->uh_sum = ~cksum_add(~udp->uh_sum, udp_sum);
-+		udp.uh_sum = ~cksum_add(~udp.uh_sum, udp_sum);
-+	memcpy(&pkt->ipv6.ip, &ip6, sizeof(ip6));
-+	memcpy(&pkt->ipv6.udp, &udp, sizeof(udp));
- }
- 
- static void
-@@ -944,9 +950,10 @@ initialize_packet(struct targ *targ)
- {
- 	struct pkt *pkt = &targ->pkt;
- 	struct ether_header *eh;
--	struct ip6_hdr *ip6;
--	struct ip *ip;
--	struct udphdr *udp;
-+	struct ip6_hdr ip6;
-+	struct ip ip;
-+	struct udphdr udp;
-+	void *udp_ptr;
- 	uint16_t paylen;
- 	uint32_t csum;
- 	const char *payload = targ->g->options & OPT_INDIRECT ?
-@@ -978,7 +985,7 @@ initialize_packet(struct targ *targ)
- #endif
- 
- 	paylen = targ->g->pkt_size - sizeof(*eh) -
--	    (targ->g->af == AF_INET ? sizeof(*ip): sizeof(*ip6));
-+	    (targ->g->af == AF_INET ? sizeof(ip): sizeof(ip6));
- 
- 	/* create a nice NUL-terminated string */
- 	for (i = 0; i < paylen; i += l0) {
-@@ -995,56 +1002,61 @@ initialize_packet(struct targ *targ)
- 
- 	if (targ->g->af == AF_INET) {
- 		eh->ether_type = htons(ETHERTYPE_IP);
--		ip = &pkt->ipv4.ip;
--		udp = &pkt->ipv4.udp;
--		ip->ip_v = IPVERSION;
--		ip->ip_hl = sizeof(*ip) >> 2;
--		ip->ip_id = 0;
--		ip->ip_tos = IPTOS_LOWDELAY;
--		ip->ip_len = htons(targ->g->pkt_size - sizeof(*eh));
--		ip->ip_id = 0;
--		ip->ip_off = htons(IP_DF); /* Don't fragment */
--		ip->ip_ttl = IPDEFTTL;
--		ip->ip_p = IPPROTO_UDP;
--		ip->ip_dst.s_addr = htonl(targ->g->dst_ip.ipv4.start);
--		ip->ip_src.s_addr = htonl(targ->g->src_ip.ipv4.start);
--		ip->ip_sum = wrapsum(checksum(ip, sizeof(*ip), 0));
-+		memcpy(&ip, &pkt->ipv4.ip, sizeof(ip));
-+		udp_ptr = &pkt->ipv4.udp;
-+		ip.ip_v = IPVERSION;
-+		ip.ip_hl = sizeof(ip) >> 2;
-+		ip.ip_id = 0;
-+		ip.ip_tos = IPTOS_LOWDELAY;
-+		ip.ip_len = htons(targ->g->pkt_size - sizeof(*eh));
-+		ip.ip_id = 0;
-+		ip.ip_off = htons(IP_DF); /* Don't fragment */
-+		ip.ip_ttl = IPDEFTTL;
-+		ip.ip_p = IPPROTO_UDP;
-+		ip.ip_dst.s_addr = htonl(targ->g->dst_ip.ipv4.start);
-+		ip.ip_src.s_addr = htonl(targ->g->src_ip.ipv4.start);
-+		ip.ip_sum = wrapsum(checksum(&ip, sizeof(ip), 0));
-+		memcpy(&pkt->ipv4.ip, &ip, sizeof(ip));
- 	} else {
- 		eh->ether_type = htons(ETHERTYPE_IPV6);
--		ip6 = &pkt->ipv6.ip;
--		udp = &pkt->ipv6.udp;
--		ip6->ip6_flow = 0;
--		ip6->ip6_plen = htons(paylen);
--		ip6->ip6_vfc = IPV6_VERSION;
--		ip6->ip6_nxt = IPPROTO_UDP;
--		ip6->ip6_hlim = IPV6_DEFHLIM;
--		ip6->ip6_src = targ->g->src_ip.ipv6.start;
--		ip6->ip6_dst = targ->g->dst_ip.ipv6.start;
-+		memcpy(&ip6, &pkt->ipv4.ip, sizeof(ip6));
-+		udp_ptr = &pkt->ipv6.udp;
-+		ip6.ip6_flow = 0;
-+		ip6.ip6_plen = htons(paylen);
-+		ip6.ip6_vfc = IPV6_VERSION;
-+		ip6.ip6_nxt = IPPROTO_UDP;
-+		ip6.ip6_hlim = IPV6_DEFHLIM;
-+		ip6.ip6_src = targ->g->src_ip.ipv6.start;
-+		ip6.ip6_dst = targ->g->dst_ip.ipv6.start;
- 	}
-+	memcpy(&udp, udp_ptr, sizeof(udp));
- 
--	udp->uh_sport = htons(targ->g->src_ip.port0);
--	udp->uh_dport = htons(targ->g->dst_ip.port0);
--	udp->uh_ulen = htons(paylen);
-+	udp.uh_sport = htons(targ->g->src_ip.port0);
-+	udp.uh_dport = htons(targ->g->dst_ip.port0);
-+	udp.uh_ulen = htons(paylen);
- 	if (targ->g->af == AF_INET) {
- 		/* Magic: taken from sbin/dhclient/packet.c */
--		udp->uh_sum = wrapsum(
--		    checksum(udp, sizeof(*udp),	/* udp header */
-+		udp.uh_sum = wrapsum(
-+		    checksum(&udp, sizeof(udp),	/* udp header */
-                     checksum(pkt->ipv4.body,	/* udp payload */
--		    paylen - sizeof(*udp),
-+		    paylen - sizeof(udp),
- 		    checksum(&pkt->ipv4.ip.ip_src, /* pseudo header */
- 			2 * sizeof(pkt->ipv4.ip.ip_src),
--			IPPROTO_UDP + (u_int32_t)ntohs(udp->uh_ulen)))));
-+			IPPROTO_UDP + (u_int32_t)ntohs(udp.uh_ulen)))));
-+		memcpy(&pkt->ipv4.ip, &ip, sizeof(ip));
- 	} else {
- 		/* Save part of pseudo header checksum into csum */
- 		csum = IPPROTO_UDP << 24;
- 		csum = checksum(&csum, sizeof(csum), paylen);
--		udp->uh_sum = wrapsum(
--		    checksum(udp, sizeof(*udp),	/* udp header */
-+		udp.uh_sum = wrapsum(
-+		    checksum(udp_ptr, sizeof(udp),	/* udp header */
- 		    checksum(pkt->ipv6.body,	/* udp payload */
--		    paylen - sizeof(*udp),
-+		    paylen - sizeof(udp),
- 		    checksum(&pkt->ipv6.ip.ip6_src, /* pseudo header */
- 			2 * sizeof(pkt->ipv6.ip.ip6_src), csum))));
-+		memcpy(&pkt->ipv6.ip, &ip6, sizeof(ip6));
- 	}
-+	memcpy(udp_ptr, &udp, sizeof(udp));
- 
- 	bzero(&pkt->vh, sizeof(pkt->vh));
- 	// dump_payload((void *)pkt, targ->g->pkt_size, NULL, 0);
-@@ -1324,7 +1336,7 @@ ping_body(void *data)
- 					ts.tv_nsec += 1000000000;
- 					ts.tv_sec--;
- 				}
--				if (0) D("seq %d/%lu delta %d.%09d", seq, sent,
-+				if (0) D("seq %d/%" PRIu64 " delta %d.%09d", seq, sent,
- 					(int)ts.tv_sec, (int)ts.tv_nsec);
- 				t_cur = ts.tv_sec * 1000000000UL + ts.tv_nsec;
- 				if (t_cur < t_min)
-@@ -1409,7 +1421,7 @@ pong_body(void *data)
- 		return NULL;
- 	}
- 	if (n > 0)
--		D("understood ponger %lu but don't know how to do it", n);
-+		D("understood ponger %" PRIu64 " but don't know how to do it", n);
- 	while (!targ->cancel && (n == 0 || sent < n)) {
- 		uint32_t txcur, txavail;
- //#define BUSYWAIT
-@@ -1864,6 +1876,7 @@ txseq_body(void *data)
- 		unsigned int space;
- 		unsigned int head;
- 		int fcnt;
-+		uint16_t sum;
- 
- 		if (!rate_limit) {
- 			budget = targ->g->burst;
-@@ -1910,19 +1923,19 @@ txseq_body(void *data)
- 				sent < limit; sent++, sequence++) {
- 			struct netmap_slot *slot = &ring->slot[head];
- 			char *p = NETMAP_BUF(ring, slot->buf_idx);
--			uint16_t *w = (uint16_t *)PKT(pkt, body, targ->g->af), t,
--				 *sum = (uint16_t *)(targ->g->af == AF_INET ?
--						 &pkt->ipv4.udp.uh_sum : &pkt->ipv6.udp.uh_sum);
-+			uint16_t *w = (uint16_t *)PKT(pkt, body, targ->g->af), t;
-+
-+			memcpy(&sum, targ->g->af == AF_INET ? &pkt->ipv4.udp.uh_sum : &pkt->ipv6.udp.uh_sum, sizeof(sum));
- 
- 			slot->flags = 0;
- 			t = *w;
- 			PKT(pkt, body, targ->g->af)[0] = sequence >> 24;
- 			PKT(pkt, body, targ->g->af)[1] = (sequence >> 16) & 0xff;
--			*sum = ~cksum_add(~*sum, cksum_add(~t, *w));
-+			sum = ~cksum_add(~sum, cksum_add(~t, *w));
- 			t = *++w;
- 			PKT(pkt, body, targ->g->af)[2] = (sequence >> 8) & 0xff;
- 			PKT(pkt, body, targ->g->af)[3] = sequence & 0xff;
--			*sum = ~cksum_add(~*sum, cksum_add(~t, *w));
-+			sum = ~cksum_add(~sum, cksum_add(~t, *w));
- 			nm_pkt_copy(frame, p, size);
- 			if (fcnt == frags) {
- 				update_addresses(pkt, targ->g);
-@@ -1952,6 +1965,7 @@ txseq_body(void *data)
- 				budget--;
- 			}
- 		}
-+		memcpy(targ->g->af == AF_INET ? &pkt->ipv4.udp.uh_sum : &pkt->ipv6.udp.uh_sum, &sum, sizeof(sum));
- 
- 		ring->cur = ring->head = head;
- 
-@@ -2209,7 +2223,7 @@ tx_output(struct my_ctrs *cur, double de
- 	abs = cur->pkts / (double)(cur->events);
- 
- 	printf("Speed: %spps Bandwidth: %sbps (raw %sbps). Average batch: %.2f pkts\n",
--		norm(b1, pps), norm(b2, bw), norm(b3, raw_bw), abs);
-+		norm(b1, pps, normalize), norm(b2, bw, normalize), norm(b3, raw_bw, normalize), abs);
- }
- 
- static void
-@@ -2219,38 +2233,72 @@ usage(void)
- 	fprintf(stderr,
- 		"Usage:\n"
- 		"%s arguments\n"
--		"\t-i interface		interface name\n"
--		"\t-f function		tx rx ping pong txseq rxseq\n"
--		"\t-n count		number of iterations (can be 0)\n"
--		"\t-t pkts_to_send	also forces tx mode\n"
--		"\t-r pkts_to_receive	also forces rx mode\n"
--		"\t-l pkt_size		in bytes excluding CRC\n"
--		"\t                     (if passed a second time, use random sizes\n"
--		"\t                      bigger than the second one and lower than\n"
--		"\t                      the first one)\n"
--		"\t-d dst_ip[:port[-dst_ip:port]]   single or range\n"
--		"\t-s src_ip[:port[-src_ip:port]]   single or range\n"
--		"\t-D dst-mac\n"
--		"\t-S src-mac\n"
--		"\t-a cpu_id		use setaffinity\n"
--		"\t-b burst size		testing, mostly\n"
--		"\t-c cores		cores to use\n"
--		"\t-p threads		processes/threads to use\n"
--		"\t-T report_ms		milliseconds between reports\n"
--		"\t-w wait_for_link_time	in seconds\n"
--		"\t-R rate		in packets per second\n"
--		"\t-X			dump payload\n"
--		"\t-H len		add empty virtio-net-header with size 'len'\n"
--		"\t-E pipes		allocate extra space for a number of pipes\n"
--		"\t-r			do not touch the buffers (send rubbish)\n"
--	        "\t-P file		load packet from pcap file\n"
--		"\t-z			use random IPv4 src address/port\n"
--		"\t-Z			use random IPv4 dst address/port\n"
--		"\t-F num_frags		send multi-slot packets\n"
--		"\t-A			activate pps stats on receiver\n"
--		"",
-+		     "\t-i interface		interface name\n"
-+		     "\t-f function		tx rx ping pong txseq rxseq\n"
-+		     "\t-n count		number of iterations (can be 0)\n"
-+#ifdef notyet
-+		     "\t-t pkts_to_send		also forces tx mode\n"
-+		     "\t-r pkts_to_receive	also forces rx mode\n"
-+#endif
-+		     "\t-l pkt_size		in bytes excluding CRC\n"
-+		     "\t			(if passed a second time, use random sizes\n"
-+		     "\t			 bigger than the second one and lower than\n"
-+		     "\t			 the first one)\n"
-+		     "\t-d dst_ip[:port[-dst_ip:port]]   single or range\n"
-+		     "\t-s src_ip[:port[-src_ip:port]]   single or range\n"
-+		     "\t-D dst-mac\n"
-+		     "\t-S src-mac\n"
-+		     "\t-a cpu_id		use setaffinity\n"
-+		     "\t-b burst size		testing, mostly\n"
-+		     "\t-c cores		cores to use\n"
-+		     "\t-p threads		processes/threads to use\n"
-+		     "\t-T report_ms		milliseconds between reports\n"
-+		     "\t-w wait_for_link_time	in seconds\n"
-+		     "\t-R rate			in packets per second\n"
-+		     "\t-X			dump payload\n"
-+		     "\t-H len			add empty virtio-net-header with size 'len'\n"
-+		     "\t-E pipes		allocate extra space for a number of pipes\n"
-+		     "\t-r			do not touch the buffers (send rubbish)\n"
-+	             "\t-P file			load packet from pcap file\n"
-+		     "\t-z			use random IPv4 src address/port\n"
-+		     "\t-Z			use random IPv4 dst address/port\n"
-+		     "\t-F num_frags		send multi-slot packets\n"
-+		     "\t-A			activate pps stats on receiver\n"
-+		     "\t-4			IPv4\n"
-+		     "\t-6			IPv6\n"
-+		     "\t-N			don't normalize units (Kbps/Mbps/etc)\n"
-+		     "\t-I			use indirect buffers, tx only\n"
-+		     "\t-o options		data generation options (parsed using atoi)\n"
-+		     "\t			OPT_PREFETCH	1\n"
-+		     "\t			OPT_ACCESS	2\n"
-+		     "\t			OPT_COPY	4\n"
-+		     "\t			OPT_MEMCPY	8\n"
-+		     "\t			OPT_TS		16 (add a timestamp)\n"
-+		     "\t			OPT_INDIRECT	32 (use indirect buffers)\n"
-+		     "\t			OPT_DUMP	64 (dump rx/tx traffic)\n"
-+		     "\t			OPT_RUBBISH	256\n"
-+		     "\t			    (send wathever the buffers contain)\n"
-+		     "\t			OPT_RANDOM_SRC  512\n"
-+		     "\t			OPT_RANDOM_DST  1024\n"
-+		     "\t			OPT_PPS_STATS   2048\n"
-+		     "\t-W			exit RX with no traffic\n"
-+		     "\t-v			verbose (more v = more verbose)\n"
-+		     "\t-C vale-config		specify a vale config\n"
-+#ifdef notyet
-+		     "\t			The configuration may consist of 0 to 4\n"
-+		     "\t			numbers separated by commas:\n"
-+		     "\t			#tx-slots,#rx-slots,#tx-rings,#rx-rings.\n"
-+		     "\t			Missing numbers or zeroes stand for default\n"
-+		     "\t			values. As an additional convenience, if\n"
-+		     "\t			exactly one number is specified, then this\n"
-+		     "\t			is assigned to both #tx-slots and #rx-slots.\n"
-+		     "\t			If there is no 4th number, then the 3rd is\n"
-+		     "\t			assigned to both #tx-rings and #rx-rings.\n"
-+#endif
-+		     "\t-e extra-bufs		extra_bufs - goes in nr_arg3\n"
-+		     "\t-m			ignored\n"
-+		     "",
- 		cmd);
--
- 	exit(0);
- }
- 
-@@ -2405,13 +2453,13 @@ main_thread(struct glob_arg *g)
- 			ppsdev = sqrt(ppsdev);
- 
- 			snprintf(b4, sizeof(b4), "[avg/std %s/%s pps]",
--				 norm(b1, ppsavg), norm(b2, ppsdev));
-+				 norm(b1, ppsavg, normalize), norm(b2, ppsdev, normalize));
- 		}
- 
- 		D("%spps %s(%spkts %sbps in %llu usec) %.2f avg_batch %d min_space",
--			norm(b1, pps), b4,
--			norm(b2, (double)x.pkts),
--			norm(b3, (double)x.bytes*8),
-+			norm(b1, pps, normalize), b4,
-+			norm(b2, (double)x.pkts, normalize),
-+			norm(b3, (double)x.bytes*8, normalize),
- 			(unsigned long long)usec,
- 			abs, (int)cur.min_space);
- 		prev = cur;
-@@ -2589,7 +2637,7 @@ main(int arc, char **argv)
- 	g.virt_header = 0;
- 	g.wait_link = 2;
- 
--	while ((ch = getopt(arc, argv, "46a:f:F:n:i:Il:d:s:D:S:b:c:o:p:"
-+	while ((ch = getopt(arc, argv, "46a:f:F:Nn:i:Il:d:s:D:S:b:c:o:p:"
- 	    "T:w:WvR:XC:H:e:E:m:rP:zZA")) != -1) {
- 
- 		switch(ch) {
-@@ -2606,6 +2654,10 @@ main(int arc, char **argv)
- 			g.af = AF_INET6;
- 			break;
- 
-+		case 'N':
-+			normalize = 0;
-+			break;
-+
- 		case 'n':
- 			g.npackets = strtoull(optarg, NULL, 10);
- 			break;
-@@ -2633,7 +2685,7 @@ main(int arc, char **argv)
- 			break;
- 
- 		case 'o':	/* data generation options */
--			g.options = atoi(optarg);
-+			g.options |= atoi(optarg);
- 			break;
- 
- 		case 'a':       /* force affinity */
-@@ -2973,8 +3025,8 @@ out:
- 		g.tx_period.tv_nsec = g.tx_period.tv_nsec % 1000000000;
- 	}
- 	if (g.td_type == TD_TYPE_SENDER)
--	    D("Sending %d packets every  %ld.%09ld s",
--			g.burst, g.tx_period.tv_sec, g.tx_period.tv_nsec);
-+	    D("Sending %d packets every  %jd.%09ld s",
-+			g.burst, (intmax_t)g.tx_period.tv_sec, g.tx_period.tv_nsec);
- 	/* Install ^C handler. */
- 	global_nthreads = g.nthreads;
- 	sigemptyset(&ss);

Property changes on: net/pkt-gen/files/patch-pkt-gen_pkt-gen.c
___________________________________________________________________
Deleted: fbsd:nokeywords
## -1 +0,0 ##
-on
\ No newline at end of property
Deleted: svn:eol-style
## -1 +0,0 ##
-native
\ No newline at end of property
Deleted: svn:mime-type
## -1 +0,0 ##
-text/plain
\ No newline at end of property
