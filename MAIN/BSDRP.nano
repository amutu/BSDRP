# BSD Router Project NanoBSD configuration file
# https://bsdrp.net
#
# NanoBSD port support added from Gitoyen:
# http://www.gitoyen.net/Howto-NanoBSD-quagga-router
# Some cleanup idea taken from imp@ nanoBSD script
# Add other parts came from the FreeNAS 8 too (iXsystems)
#
################## Common section #################

# Console port speed
COM_SPEED=115200
# Where cust_pkg() finds packages to install
NANO_PACKAGE_DIR=${NANO_TOOLS}/Pkg
NANO_PACKAGE_LIST="*"

# Need to set early the NANO_ARCH variable for being use in the add_port function
# TARGET_ARCH was set by the make script
NANO_ARCH=${TARGET_ARCH}

# Options to put in make.conf during buildworld only
# BOOT_COMCONSOLE_SPEED is useless because we using /boot.config with -Sspeed option
# But for baud higher than 9600 is not supported by boot0:
#  then we let the speed already configured by the BIOS by setting it to 0
CONF_BUILD='
WITH_META_MODE=
MALLOC_PRODUCTION=
BOOT_BOOT0_COMCONSOLE_SPEED=0
'

# Options to put in make.conf during installworld only
# Do not use: WITHOUT_TOOLCHAIN=, because installing port need it
# Do not use: WITHOUT_INSTALLLIB=, because perl can't compile
# We would compile symbol files, but not install them by default
CONF_INSTALL='
'

# Options to put in make.conf during both build- & installworld.
# See the file /usr/src/tools/build/options or man src.conf for details
# WITHOUT_FORTH= Needed for bootloader.
# WITHOUT_GROFF= incompatible with isc-dhcp-server (needed for build  man page)
# WITHOUT_KVM= and WITHOUT_KVM_SUPPORT= prevent buildworld to complet (don't know why)

CONF_WORLD='
WITHOUT_ACCT=
WITHOUT_AMD=
WITHOUT_APM=
WITHOUT_ASSERT_DEBUG=
WITHOUT_ATF=
WITHOUT_ATM=
WITHOUT_AUDIT=
WITHOUT_AUTHPF=
WITHOUT_AUTOFS=
WITHOUT_BHYVE=
WITHOUT_BLUETOOTH=
WITHOUT_BOOTPARAMD=
WITHOUT_BOOTPD=
WITHOUT_BSDINSTALL=
WITHOUT_CALENDAR=
WITHOUT_CCD=
WITHOUT_CROSS_COMPILER=
WITHOUT_CTM=
WITHOUT_CVS=
WITHOUT_DICT=
WITHOUT_EE=
WITHOUT_EXAMPLES=
WITHOUT_FINGER=
WITHOUT_FLOPPY=
WITHOUT_FREEBSD_UPDATE=
WITHOUT_GAMES=
WITHOUT_GCOV=
WITHOUT_GNUCXX=
WITHOUT_GPIB=
WITHOUT_GPIO=
WITHOUT_GROFF=
WITHOUT_HAST=
WITHOUT_HTML=
WITHOUT_INFO=
WITHOUT_IPX=
WITHOUT_IPX_SUPPORT=
WITHOUT_ISCSI=
WITHOUT_KERBEROS=
WITHOUT_KERBEROS_SUPPORT=
WITHOUT_LIB32=
WITHOUT_LINT=
WITHOUT_LLVM_ASSERTIONS=
WITHOUT_LLVM_TARGET_ALL=
WITHOUT_LOADER_FIREWIRE=
WITHOUT_LOADER_GELI=
WITHOUT_LOCATE=
WITHOUT_LPR=
WITHOUT_NCP=
WITHOUT_NDIS=
WITHOUT_NETCAT=
WITHOUT_NIS=
WITHOUT_NLS=
WITHOUT_NLS_CATALOGS=
WITHOUT_NS_CACHING=
WITHOUT_PC_SYSINSTALL=
WITHOUT_PORTSNAP=
WITHOUT_PROFILE=
WITHOUT_QUOTAS=
WITHOUT_RBOOTD=
WITHOUT_RCMDS=
WITHOUT_RCS=
WITHOUT_RESCUE=
WITHOUT_ROUTED=
WITHOUT_SENDMAIL=
WITHOUT_SERVICESDB=
WITHOUT_SHAREDOCS=
WITHOUT_SVNLITE=
WITHOUT_SYSCONS=
WITHOUT_SYSINSTALL=
WITHOUT_TALK=
WITHOUT_TESTS=
WITHOUT_TESTS_SUPPORT=
WITHOUT_TFTP=
WITHOUT_TIMED=
WITHOUT_UNBOUND=
WITHOUT_USB_GADGET_EXAMPLES=
WITHOUT_WIRELESS=
WITHOUT_WPA_SUPPLICANT_EAPOL=
WITHOUT_ZFS=
WITH_IDEA=
WITH_OFED=
WITH_DEBUG_FILES=
WITH_DIRDEPS_BUILD=
WITH_RETPOLINE=
WITH_REPRODUCIBLE_BUILD=
WITH_MALLOC_PRODUCTION=
WITH_OPENSSL_KTLS=
WITHOUT_PTHREADS_ASSERTIONS=
'

# Customize commands.
NANO_CUSTOMIZE=""

# Late customize commands.
NANO_LATE_CUSTOMIZE=""

# Newfs paramters to use
NANO_NEWFS="-b 4096 -f 512 -i 8192 -O1 -m 0"

# Number of code images on media (1 or 2)
NANO_IMAGES=2

# 0 -> Leave second image all zeroes so it compresses better.
# 1 -> Initialize second image with a copy of the first
NANO_INIT_IMG2=0

# Size of code file system in 512 bytes sectors
# If zero, size will be as large as possible.
NANO_CODESIZE=0

### HOW TO Calculate partition size ###
# If you want a 5MB partition, do:
# 5 * 1024 * 1024 / 512 = 10240

# Size of configuration file system in 512 bytes sectors
# Cannot be zero.
# about 15MB = 20480
NANO_CONFSIZE=20480

# Size of data file system in 512 bytes sectors
# If zero: no partition configured.
# If negative: max size possible
# This filesystem is used for archive configuration and
# for user customized scripts or tool
NANO_DATASIZE=20480

# Size of the /etc ramdisk in 512 bytes sectors
# 20480=10MB
NANO_RAM_ETCSIZE=20480

# Size of the /tmp+/var ramdisk in 512 bytes sectors
# 62500=32MB (usefull for log files)
NANO_RAM_TMPVARSIZE=62500

# Boot0cfg configuration mode
NANO_BOOT0CFG="-o packet -s 1 -m 3 -t 18"

# Backing type of md(4) device
# Can be "file" or "swap"
NANO_MD_BACKING="file"

# Label name
# Alphacharacter only
NANO_LABEL=${NANO_NAME}

# Progress Print level
PPLEVEL=3

# Add netblast/netrecieve tools
add_netrate () {
	TOOLS_LIST="cxgbtool ifinfo netrate/netblast netrate/netreceive netrate/netsend"
	# crypto didn't compile anymore but I don't understand why
	# mctest didn't compile since clang6
	mkdir -p ${NANO_WORLDDIR}/dev
	mount -t devfs devfs ${NANO_WORLDDIR}/dev
	mount -t nullfs ${NANO_SRC} ${NANO_WORLDDIR}/usr/src
	mkdir -p ${NANO_WORLDDIR}/usr/workdir
	for TOOL in ${TOOLS_LIST}; do
		export TOOL
		CR 'make clean -C /usr/src/tools/tools/${TOOL}'
		CR 'env OSVERSION=${FBSD_DST_OSVERSION} \
			UNAME_r=${FBSD_DST_RELEASE} UNAME_v="FreeBSD ${FBSD_DST_RELEASE} ${FBSD_DST_OSVERSION}" \
			make WRKDIRPREFIX=/usr/workdir -C /usr/src/tools/tools/${TOOL}'
		CR 'make WRKDIRPREFIX=/usr/workdir -C /usr/src/tools/tools/${TOOL} install clean'
	done # for TOOL
	rm -rf ${NANO_WORLDDIR}/usr/workdir
	umount ${NANO_WORLDDIR}/usr/src
	umount ${NANO_WORLDDIR}/dev
}

# Recursive complex fonction: Generate one function for each ports
add_port () {
	port=$(echo $1 | sed -e 's/\//_/')
	# Check if package allready exist
	cd "${PORTS_SRC}/$1"
	# Warning: a package name can change regarding the build option
	if [ $# -gt 1 ]; then
		PKG_NAME=$(env PORTSDIR="${PORTS_SRC}" make package-name "$2")
	else
		PKG_NAME=$(env PORTSDIR="${PORTS_SRC}" make package-name)
	fi
	if [ -f "${NANO_OBJ}"/ports/packages/All/${PKG_NAME}.pkg ]; then
	# Pkg file found: Generate add_pkg_NAME function
		eval "
		add_pkg_${port} () {
			#Need to create ${NANO_OBJ}/ports in this add_pkg_${port} function
			if [ ! -d \${NANO_OBJ}/ports ]; then
				mkdir -p \${NANO_OBJ}/ports/packages
			fi
			mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
			mount -t nullfs \${NANO_OBJ}/ports/packages \
				\${NANO_WORLDDIR}/usr/ports/packages
			# Since pkg 1.11, need devfs (because it is using /dev/null)
			mount -t devfs devfs \${NANO_WORLDDIR}/dev
			# Run ldconfig before
			CR '/sbin/ldconfig -m /lib /usr/lib /usr/lib/compat'
			# Start the pkg add
			# Create the repo configuration file
			mkdir -p \${NANO_WORLDDIR}/usr/local/etc/pkg/repos
			cat <<EOF > \${NANO_WORLDDIR}/usr/local/etc/pkg/repos/myrepo.conf
myrepo: {
 url: "file:///usr/ports/packages",
 enabled: true,
 signature_type: 'none',
 assume_always_yes: true
}
FreeBSD: {
 enabled: false
}
EOF
			# Bug with pkg: not using the "-d" option prevent to install the package with error message "pkg fail to extract static"
			# Need to force assume_always_yes for avoiding bootstrap pkg confirmation too
			CR 'env ASSUME_ALWAYS_YES=true SIGNATURE_TYPE=none pkg -d add /usr/ports/packages/All/${PKG_NAME}.pkg'
			umount \${NANO_WORLDDIR}/usr/ports/packages
			umount \${NANO_WORLDDIR}/dev
			rmdir \${NANO_WORLDDIR}/usr/ports/packages
			rmdir \${NANO_WORLDDIR}/usr/ports
		}
		customize_cmd add_pkg_${port}
		"
	else
	# No pkg file: Generate add_port_NAME function
		eval "
		add_port_${port} () {
			#Need to create ${NANO_OBJ}/ports in this add_port_${port} function
			[ -d \${NANO_OBJ}/ports ] || mkdir -p \${NANO_OBJ}/ports/packages
			mount -t nullfs \${NANO_SRC} \${NANO_WORLDDIR}/usr/src
			mkdir -p \${NANO_WORLDDIR}/usr/ports
			mount -t nullfs \${PORTS_SRC} \${NANO_WORLDDIR}/usr/ports
			mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
			mount -t nullfs \${NANO_OBJ}/ports/packages \
				\${NANO_WORLDDIR}/usr/ports/packages
			mkdir -p \${NANO_WORLDDIR}/dev
			mount -t devfs devfs \${NANO_WORLDDIR}/dev
			mkdir -p \${NANO_WORLDDIR}/usr/pobj
			mkdir -p \${NANO_WORLDDIR}/usr/workdir
			cp /etc/resolv.conf \${NANO_WORLDDIR}/etc/resolv.conf
			# If a port have NO_PACKAGE, comment-it
			if grep -q NO_PACKAGE \${NANO_WORLDDIR}/usr/ports/$1/Makefile; then
				mv \${NANO_WORLDDIR}/usr/ports/$1/Makefile \${NANO_WORLDDIR}/usr/ports/$1/Makefile.nanobsd
				sed 's/NO_PACKAGE/\#NO_PACKAGE/g' \${NANO_WORLDDIR}/usr/ports/$1/Makefile.nanobsd > \${NANO_WORLDDIR}/usr/ports/$1/Makefile
			fi
			# Run ldconfig before
			CR '/sbin/ldconfig -m /lib /usr/lib /usr/lib/compat'
			# Start the build
			CR 'env OSVERSION=${FBSD_DST_OSVERSION} \
				UNAME_r=${FBSD_DST_RELEASE} UNAME_v=\"FreeBSD ${FBSD_DST_RELEASE} ${FBSD_DST_OSVERSION}\" \
				make WRKDIRPREFIX=/usr/workdir FETCH_ARGS=-pRr -C /usr/ports/$1 \
				package install BATCH=yes \
				WITHOUT=\"INFO NLS X11 DOCS EXAMPLES\" "$2" clean'
			# add a -DWITH_DEBUG before the $2 for building port with debug
			# and comment the strip command

			rm \${NANO_WORLDDIR}/etc/resolv.conf
			rm -rf \${NANO_WORLDDIR}/usr/obj
			rm -rf \${NANO_WORLDDIR}/usr/pobj
			rm -rf \${NANO_WORLDDIR}/usr/workdir
			umount \${NANO_WORLDDIR}/dev
			umount \${NANO_WORLDDIR}/usr/ports/packages
			rmdir \${NANO_WORLDDIR}/usr/ports/packages
			umount \${NANO_WORLDDIR}/usr/ports
			rmdir \${NANO_WORLDDIR}/usr/ports
			umount \${NANO_WORLDDIR}/usr/src
		}
		customize_cmd add_port_${port}
		"
	fi
}

#### Ports list section #####

# Need to manually list all the package to install
# We could use "make package-depends-list | cut -d ' ' -f3" on a port
# for getting all its unordered running dependency.
# And you can use a grep "depends on .* - not found" /usr/obj/project/_.cust.add_port_port-name
# for getting the ordered list

#add_port "ports-mgmt/pkg"
#add_port "security/ca_root_nss"
# add_port "print/indexinfo"
# add_port "devel/readline"

#add_port "ftp/curl" "WITH=\"GSSAPI_NONE\" WITHOUT+=\"GSSAPI_BASE IMAPÂ GOPHER HTTP2 POP3 RTSP SMTP TELNET\""
#add_port "security/libssh"
#add_port "net/bird2"

# One tool to resume them all
#add_port "net-mgmt/nstat"

# BSDRP custom function
bsdrp_custom () {
	# Replace BSDRP_VERSION in /boot/lua/brand-bsdrp.lua with the version number in etc/version
	sed -i "" -e /BSDRP_VERSION/s//$(cat ${NANO_WORLDDIR}/etc/version)/ ${NANO_WORLDDIR}/boot/lua/brand-bsdrp.lua
	# Disable reverse DNS in sshd:
	echo "UseDNS no" >> ${NANO_WORLDDIR}/etc/ssh/sshd_config
	# Update login.conf db
	CR 'cap_mkdb /etc/login.conf'

	chmod 600 ${NANO_WORLDDIR}/boot/entropy
	# Disable system beep and enable color with csh
	{
	echo "set nobeep"
	echo "setenv CLICOLOR true"
	} >> ${NANO_WORLDDIR}/etc/csh.cshrc

	# cpio (cust_install_file) doesn't support symlink
	# relocate /root/.ssh to /etc/dot.root.ssh
	# This permit to save ssh keys
	mkdir -p ${NANO_WORLDDIR}/etc/dot.ssh.root
	ln -s ../etc/dot.ssh.root ${NANO_WORLDDIR}/root/.ssh

	# turn on noatime for /cfg
	sed -i "" -e "/cfg/s/rw/rw,noatime/" ${NANO_WORLDDIR}/etc/fstab
	# Add /data partition to fstab (config script use it for archiving old configurations)
	echo "/dev/ufs/${NANO_LABEL}s4 /data ufs rw,noauto,failok 0 0" >> ${NANO_WORLDDIR}/etc/fstab
	[ -d ${NANO_WORLDDIR}/data ] || mkdir -p ${NANO_WORLDDIR}/data

	# relocate /var/cron to /etc/cron
	# This permit to save crontab (only /etc and /usr/local/etc are saved)
	mkdir -p ${NANO_WORLDDIR}/etc/cron
	rm -rf ${NANO_WORLDDIR}/var/cron
	ln -s ../etc/cron ${NANO_WORLDDIR}/var/cron

	# Add /etc/rc.conf.misc into the /etc/default/rc.conf
	sed -i "" -e "s/rc.conf.local/rc.conf.local \/etc\/rc.conf.misc/g" ${NANO_WORLDDIR}/etc/defaults/rc.conf

	# Compress the kernel (save 10Mb)
	#if [ -f ${NANO_WORLDDIR}/boot/kernel/kernel ]; then
	#	if ! gzip -v9 ${NANO_WORLDDIR}/boot/kernel/kernel; then
	#		echo "Error during zipping the kernel"
	#	fi
	#fi
	# Remove some of the folders (without share/snmp)
	# usr/include : 15MB
	FOLDERS_TO_REMOVE='
usr/libexec/bsdinstall
usr/local/include
usr/local/man
usr/local/info
usr/local/share/doc
usr/local/share/examples
usr/include
usr/share/examples
usr/share/info
usr/share/man/man3
usr/share/man/man9
usr/share/me
usr/share/pc-sysinstall
usr/share/openssl
usr/share/syscons
usr/libdata/lint
usr/libdata/ldscripts
'
	for c in $FOLDERS_TO_REMOVE; do
		if [ -d ${NANO_WORLDDIR}/$c ]; then
			echo "Removing ${NANO_WORLDDIR}/$c"
			if ! rm -rf ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't remove it!"
			fi
		fi
	done

	# Remove some files not compliant with WITHOUT_ and tool chain
	# All ports are compiled, then we can remove all TOOLCHAIN files
	# This save about 25MB.
	# The list of these files was generated by a the output of:
	# usr/src/tools/tools/build_option_survey
	# Because it's a very time consuming script, output are online:
	# https://people.freebsd.org/~olivier/build_option_survey_20160406/

	FILES_TO_REMOVE='
boot/boot1.efi
boot/boot1.efifat
boot/loader.efi
sbin/hastd
sbin/hastctl
usr/sbin/ctladm
usr/bin/ctlstat
usr/local/etc/rc.d/freevrrpd.sh.sample
usr/share/misc/magic.mgc
usr/share/misc/termcap.db
usr/bin/addr2line
usr/bin/gnu-ar
usr/bin/as
usr/bin/ld
usr/bin/nm
usr/bin/objcopy
usr/bin/gnu-ranlib
usr/bin/readelf
usr/bin/size
usr/bin/strings
usr/bin/strip
usr/bin/cc
usr/bin/gcc
usr/bin/gcpp
usr/bin/cpp
usr/bin/c++
usr/bin/g++
usr/bin/CC
usr/bin/c++filt
usr/bin/gcov
usr/bin/gdb
usr/bin/gdbtui
usr/bin/kgdb
usr/bin/ar
usr/bin/ranlib
usr/bin/c89
usr/bin/c99
usr/bin/sum
usr/bin/compile_et
usr/bin/ctags
usr/bin/file2c
usr/bin/gprof
usr/bin/od
usr/bin/indent
usr/bin/m4
usr/bin/lex
usr/bin/lex++
usr/bin/flex
usr/bin/flex++
usr/bin/mt
usr/bin/mkstr
usr/bin/rpcgen
usr/bin/unifdef
usr/bin/unifdefall
usr/bin/nvi
usr/bin/vgrind
usr/bin/lint
usr/bin/xstr
usr/bin/lzdec
usr/bin/yacc
usr/bin/yyfix
usr/bin/byacc
usr/bin/lzdec
usr/bin/clang
usr/bin/clang++
usr/bin/clang-cpp
usr/bin/clang-tblgen
usr/bin/tblgen
usr/bin/crunchgen
usr/bin/crunchide
usr/libexec/cc1
usr/libexec/cc1plus
usr/libexec/cc1obj
usr/libexec/vfontedpr
usr/libexec/lint1
usr/libexec/lint2
usr/sbin/btxld
usr/sbin/config
usr/sbin/i2c
usr/sbin/rmt
usr/share/misc/gprof.flat
usr/share/misc/gprof.callg
usr/share/misc/vgrindefs
usr/share/misc/vgrindefs.db
usr/share/tmac/tmac.vgrind
'
	for c in $FILES_TO_REMOVE; do
		if [ -f ${NANO_WORLDDIR}/$c ]; then
			echo "Removing ${NANO_WORLDDIR}/$c"
			if ! rm -rf ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't remove it!"
			fi
			# look for associated man page and delete it too
			if ! find ${NANO_WORLDDIR}/usr/share/man -name $(basename $c)".*.gz" -exec rm -- {} +; then
				echo "no man page for $c"
			fi
			# look for associated debug file and delete it too
			if [ -f ${NANO_WORLDDIR}/usr/lib/debug/$c.debug ]; then
				rm ${NANO_WORLDDIR}/usr/lib/debug/$c.debug
			fi
		else
			echo "Missing file to delete: $c"
		fi
	done

	# Move termcap.small file
	if [ -f ${NANO_WORLDDIR}/etc/termcap.small ]; then
		mv ${NANO_WORLDDIR}/etc/termcap.small ${NANO_WORLDDIR}/usr/share/misc/termcap.db
	fi

	# Kill all .a's that are installed with TOOLCHAIN (remove 33MB)
	find ${NANO_WORLDDIR} -type f -name \*.a | xargs rm

	# Moving kerned & world debug symbols into debug.tar.xz file
	if [ -d ${NANO_WORLDDIR}/usr/lib/debug ]; then
		if [ -f  ${NANO_WORLDDIR}/boot/kernel/kernel.symbols ]; then
			if [ ! -d ${NANO_WORLDDIR}/usr/lib/debug/boot/kernel ]; then
				mkdir -p ${NANO_WORLDDIR}/usr/lib/debug/boot/kernel
			fi
			mv ${NANO_WORLDDIR}/boot/kernel/*.symbols ${NANO_WORLDDIR}/usr/lib/debug/boot/kernel
		fi
		tar cfvZ ${NANO_OBJ}/debug.tar.xz -C ${NANO_WORLDDIR}/usr/lib debug
		rm -rf ${NANO_WORLDDIR}/usr/lib/debug
		# relocate /usr/lib/debug to /data/debug (debug archive files needs more than 1Gb for being extracted)
		ln -s /data/debug ${NANO_WORLDDIR}/usr/lib/debug
	fi
	# strip binaries for ports (tips from FreeNAS 8)
	pprint 4 "Stripping binaries and libraries"
	for dir in $(find ${NANO_WORLDDIR}/ -name '*bin' -or -name 'lib' -maxdepth 3); do
		for f in $(find $dir -type f); do
			strip 2>/dev/null $f || :
		done
	done
}

# Enable only serial system only
bsdrp_console_serial () {
	# Force first 4 serial console into "onifexists" to be sure to enable them
	# but preventing polluting console with "getty ... No such file or directory"
	sed -i "" -e '/^ttyu[0]/s/onifconsole/on/' ${NANO_WORLDDIR}/etc/ttys
	sed -i "" -e '/^ttyu[1-3]/s/onifconsole/onifexists/' ${NANO_WORLDDIR}/etc/ttys
	# Enable local video devices only if they exists too
	#  this prevent to overload console with theses message:
	#  getty[7]: open /dev/ttyv1: No such file or directory
	#  init: getty repeating too quickly on port /dev/ttyv1, sleeping 30 secs
	sed -i "" -e '/^ttyv[0-4]/s/on /onifexists /' ${NANO_WORLDDIR}/etc/ttys
	# Disable some syscons devices: No need for 8 on a router
	sed -i "" -e '/^ttyv[4-8]/s/on /off /' ${NANO_WORLDDIR}/etc/ttys
	# Tell loader to use serial console early.
	echo "-S${COM_SPEED} -h" > ${NANO_WORLDDIR}/boot.config

}

# Enable use of keyboard/vga and serial
bsdrp_console_dual () {
	# Force first 4 serial console into "onifexists" to be sure to enable them
	# but preventing polluting console with "getty ... No such file or directory"
	sed -i "" -e '/^ttyu[0-1]/s/on/onifexists/' ${NANO_WORLDDIR}/etc/ttys
	sed -i "" -e '/^ttyu[2-3]/s/onifconsole/onifexists/' ${NANO_WORLDDIR}/etc/ttys
	# Tell loader to use serial and vga console, set baud speed
	echo "-S${COM_SPEED} -Dh" > ${NANO_WORLDDIR}/boot.config
}

# Standard vga console, but permit serial port to be use as vt100 console
bsdrp_console_vga () {
	# Disable some syscons devices: No need for 8 on a router
	sed -i "" -e '/^ttyv[4-8]/s/on /off /' ${NANO_WORLDDIR}/etc/ttys
	# Tell loader to use vga and serial and set serial speed (boot0 will be vga only)
	echo "-S${COM_SPEED} -Dh" > ${NANO_WORLDDIR}/boot.config
}

# Special xen console configuration
bsdrp_console_xen () {
	#Remove all default virtual terminal (in pv mode, need to check in hvm)
	sed -i '' '/^ttyv/d' ${NANO_WORLDDIR}/etc/ttys
	#Add a new xc0 console
	echo 'xc0  "/usr/libexec/getty Pc" vt100  on  secure' >> ${NANO_WORLDDIR}/etc/ttys
	#Replace the default em0 by xn0 in rc.conf
	sed -i "" -e /ifconfig_/s/em0/xn0/ ${NANO_WORLDDIR}/etc/rc.conf
}

# From FreeNAS 8
shrink_md_fbsize()
{
	# We have a lot of little files on our memory disks. Let's decrease
	# the block and frag size to fit more little files on them (this
	# halves our space requirement by ~50% on /etc and /var on 8.x --
	# and gives us more back on 9.x as the default block and frag size
	# are 4 times larger).
	sed -i '' -e 's,-S -i 4096,-S -i 4096 -b 4096 -f 512,' \
		${NANO_WORLDDIR}/etc/rc.initdiskless
}
customize_cmd shrink_md_fbsize

# Secure BSDRP by using schg flag
bsdrp_secure () {
	# TODO: Need to check if flag allready set,
	#		otherwise it will disable it
	chflags -R schg ${NANO_WORLDDIR}/bin
	chflags -R schg ${NANO_WORLDDIR}/sbin
	chflags -R schg ${NANO_WORLDDIR}/boot/kernel
	chflags -R schg ${NANO_WORLDDIR}/libexec
	chflags -R schg ${NANO_WORLDDIR}/lib
}

# Install Custom scripts and config files
customize_cmd cust_install_files

# Need to execute the bsdrp_custom after the cust_install_files
customize_cmd bsdrp_custom

# Allow root login via ssh
customize_cmd cust_allow_ssh_root

# Secure BSDRP
# TO DO: secure the BSDRP (chflags)
#customize_cmd bsdrp_secure
